{"version":3,"sources":["webpack:///path---what-the-adt-02-d29959f47e03c380148a.js","webpack:///./.cache/json/what-the-adt-02.json"],"names":["webpackJsonp","657","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","path","date","pathContext","slug","previous","fields","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,uBAAAC,OAAA,mBAA0DC,gBAAmBC,GAAA,oIAAAC,KAAA;AAAsl8DC,aAAm2GC,KAAA,mBAAAN,MAAA,0CAAAO,KAAA,kBAAoGC,aAAgBC,KAAA,oBAAAC,UAAuCC,QAAUF,KAAA,qBAA2BJ,aAAgBC,KAAA,mBAAAN,MAAA,qDAAsFY,MAASD,QAAUF,KAAA,qBAA2BJ,aAAgBC,KAAA,mBAAAN,MAAA","file":"path---what-the-adt-02-d29959f47e03c380148a.js","sourcesContent":["webpackJsonp([213318659538528],{\n\n/***/ 657:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"(shatteredaesthetic)\",\"author\":\"Jason Polhemus\"}},\"markdownRemark\":{\"id\":\"/Users/travis/build/shatteredaesthetic/shatteredaesthetic.github.io/content/what-the-adt-02.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>Part 2 - Baby’s First UI, plus Prettification</h2>\\n<p>Ahoy-hoy! When we left off, we had a function, <code class=\\\"language-text\\\">logic</code> that, when given an environment and an integer, weighed the integer against a target in the environment. But…it’s not very ergonomic, is it? A player would have to edit the code and refresh it in the terminal. That allows them to see the environment, and…well, that’s not really a game, is it? More like reading comprehension.</p>\\n<p>We should create an interface for the player, something that would allow them to actually guess. We’ll start with a command line interface. The player will be asked for a number, and we’ll analyze their guess! Simple enough, but let’s start with a quick rewrite of our code so far. All the code is <a href=\\\"https://github.com/shatteredaesthetic/cipher-guess\\\">in this repo</a>, in the <code class=\\\"language-text\\\">what-adt-02</code> branch, if you’d like to follow along.</p>\\n<h4>Perhaps a little refresher…</h4>\\n<p>Let’s get a recap of what we have:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// index.js</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> Either<span class=\\\"token punctuation\\\">,</span> Reader<span class=\\\"token punctuation\\\">,</span> pipe<span class=\\\"token punctuation\\\">,</span> pipeK <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> branch <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks/Pair/branch'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> either <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks/pointfree/either'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> runWith <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks/pointfree/runWith'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> taggedSum <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'daggy'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> Right<span class=\\\"token punctuation\\\">,</span> Left <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> Either\\n\\n<span class=\\\"token keyword\\\">const</span> Ord <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">taggedSum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Ord'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  LT<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  EQ<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  GT<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// isTolerant : (Int, Int) -> Int -> Eq</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">isTolerant</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>low<span class=\\\"token punctuation\\\">,</span> high<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> n <span class=\\\"token operator\\\">=></span>\\n  n <span class=\\\"token operator\\\">&lt;</span> low <span class=\\\"token operator\\\">?</span> Ord<span class=\\\"token punctuation\\\">.</span>LT <span class=\\\"token punctuation\\\">:</span> n <span class=\\\"token operator\\\">></span> high <span class=\\\"token operator\\\">?</span> Ord<span class=\\\"token punctuation\\\">.</span>GT <span class=\\\"token punctuation\\\">:</span> Ord<span class=\\\"token punctuation\\\">.</span>EQ\\n\\n<span class=\\\"token comment\\\">// firstTest : Int -> Either String Int</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">firstTest</span> <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">&lt;=</span> n <span class=\\\"token operator\\\">&amp;&amp;</span> n <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">100</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">isNaN</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">Right</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">Left</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'You need to learn to follow instructions'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// secondTest : Env -> Int -> Either String Int</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">secondTest</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> target<span class=\\\"token punctuation\\\">,</span> tolerance <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> n <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token function\\\">branch</span><span class=\\\"token punctuation\\\">(</span>target<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bimap</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">-</span> tolerance<span class=\\\"token punctuation\\\">,</span> x <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> tolerance<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">merge</span><span class=\\\"token punctuation\\\">(</span>isTolerant<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span> n<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cata</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      LT<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">Left</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Too Low'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      EQ<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">Right</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      GT<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">Left</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Too High'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// thirdTest : Env -> Int -> Either String String</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">thirdTest</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> target <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> n <span class=\\\"token operator\\\">=></span>\\n  target <span class=\\\"token operator\\\">===</span> n <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">Right</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Win'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">Right</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Close Enough'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// runTests : Env -> Int -> Either String Int</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">runTests</span> <span class=\\\"token operator\\\">=</span> env <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">pipeK</span><span class=\\\"token punctuation\\\">(</span>firstTest<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">secondTest</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">thirdTest</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// gameLogic : Either String Int -> Reader (Either String String)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">gameLogic</span> <span class=\\\"token operator\\\">=</span> either <span class=\\\"token operator\\\">=></span> Reader<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ask</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>env <span class=\\\"token operator\\\">=></span> either<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">chain</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">runTests</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// logic : Env -> Int -> Either String String)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">logic</span> <span class=\\\"token operator\\\">=</span> env <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>Either<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">,</span> gameLogic<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">runWith</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// output : Either String String -> ()</span>\\n<span class=\\\"token keyword\\\">const</span> output <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">either</span><span class=\\\"token punctuation\\\">(</span>\\n  str <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`Left: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>str<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  str <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`Right: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>str<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// env : Env</span>\\n<span class=\\\"token keyword\\\">const</span> env <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  target<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">23</span><span class=\\\"token punctuation\\\">,</span>\\n  tolerance<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">logic</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> output<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token function\\\">result</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">21</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// logs: 'Right: Close Enough'</span></code></pre>\\n      </div>\\n<p>It works, but we aren’t really using the <code class=\\\"language-text\\\">Reader</code> to it’s full potential. Right now we’re unwrapping the <code class=\\\"language-text\\\">Reader</code> and passing the <code class=\\\"language-text\\\">env</code> to <code class=\\\"language-text\\\">runTests</code>, which distributes it further. We’re making good use of the <code class=\\\"language-text\\\">Either</code> … what if we could extend the functionality of the <code class=\\\"language-text\\\">Reader</code> into out <code class=\\\"language-text\\\">Either</code>s.</p>\\n<h4>There must be a better way!</h4>\\n<p>It turns out, we can! What we want, essentially, is a Reader that always holds an Either. <code class=\\\"language-text\\\">crocks</code> has our back, providing a handy <code class=\\\"language-text\\\">ReaderT</code> ADT. This is a <code class=\\\"language-text\\\">Reader Transformer</code>, which means that, once provided with a monad, spits out that monad, with an additional Reader interface. For us, that translates into an <code class=\\\"language-text\\\">Either</code> that has it’s own configuration to play with. Let’s rewrite our test functions to use this, to get a better handle one what’s happening. But first, some infrastructure:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> ReaderT <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> ifElse <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks/logic/ifElse'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> K <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks/combinators/constant'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> I <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks/combinators/identity'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> M <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">ReaderT</span><span class=\\\"token punctuation\\\">(</span>Either<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> ask<span class=\\\"token punctuation\\\">,</span> liftFn <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> M\\n\\n<span class=\\\"token comment\\\">// fail : String -> () -> Either String ()</span>\\n<span class=\\\"token keyword\\\">const</span> fail <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>Left<span class=\\\"token punctuation\\\">,</span> K<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// pass : String -> () -> Either () String</span>\\n<span class=\\\"token keyword\\\">const</span> pass <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>Right<span class=\\\"token punctuation\\\">,</span> K<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>We’ll import some new functions from <code class=\\\"language-text\\\">crocks</code>, grabbing the <code class=\\\"language-text\\\">ReaderT</code>, as well as a cool helper function <code class=\\\"language-text\\\">ifElse</code> that wraps ternary expressions, and two combinators, <code class=\\\"language-text\\\">constant</code> and <code class=\\\"language-text\\\">identity</code> (renamed as <code class=\\\"language-text\\\">K</code> and <code class=\\\"language-text\\\">I</code>, respectively).</p>\\n<p>Next, we create our transformer <code class=\\\"language-text\\\">M</code>, giving the <code class=\\\"language-text\\\">Either</code> object to the <code class=\\\"language-text\\\">ReaderT</code> constructor. For convenience, we then pull the <code class=\\\"language-text\\\">liftFn</code> and <code class=\\\"language-text\\\">ask</code> functions off of <code class=\\\"language-text\\\">M</code>. The last two functions just allow us to have more readability in our tests. Speaking of, let’s look at our first one:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// firstTest : Int -> ReaderT Env (Either String Int)</span>\\n<span class=\\\"token keyword\\\">const</span> firstTest <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">liftFn</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">ifElse</span><span class=\\\"token punctuation\\\">(</span>\\n    n <span class=\\\"token operator\\\">=></span> <span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">isNaN</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">&lt;=</span> n <span class=\\\"token operator\\\">&amp;&amp;</span> n <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">,</span>\\n    Right<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function\\\">fail</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'You need to learn to follow instructions'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Let’s look at the first test. It looks very similar to the previous one. We changed the ternary expression in the first version to use <code class=\\\"language-text\\\">ifElse</code>. It takes a predicate function, followed by a function to call for a true and a false outcome of the predicate. The input to the predicate is passed to the result functions. The ‘true’ branch has a <code class=\\\"language-text\\\">Right</code>, to wrap a true to pass on. The ‘false’ branch calls fail with a message fed in. If you got here, you go no farther.</p>\\n<p>So far, so good: we’ve replicated the previous behavior. To get this to <code class=\\\"language-text\\\">chain</code> on our <code class=\\\"language-text\\\">M</code>, though, we’ll need to to return a <code class=\\\"language-text\\\">ReaderT Env (Either String Int)</code>. To do this, we only need to wrap our current function in a liftFn. First test - check. Let’s move on:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// isTolerant : (Int, Int) -> Int -> Eq</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">isTolerant</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>low<span class=\\\"token punctuation\\\">,</span> high<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">ifElse</span><span class=\\\"token punctuation\\\">(</span>\\n  n <span class=\\\"token operator\\\">&lt;</span> low<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">K</span><span class=\\\"token punctuation\\\">(</span>Ord<span class=\\\"token punctuation\\\">.</span>LT<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">ifElse</span><span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">></span> high<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">K</span><span class=\\\"token punctuation\\\">(</span>Ord<span class=\\\"token punctuation\\\">.</span>GT<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">K</span><span class=\\\"token punctuation\\\">(</span>Ord<span class=\\\"token punctuation\\\">.</span>EQ<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// secondTest : Int -> ReaderT Env (Either String Int)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">secondTest</span> <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token function\\\">ask</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> tolerance<span class=\\\"token punctuation\\\">,</span> target <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n      <span class=\\\"token function\\\">branch</span><span class=\\\"token punctuation\\\">(</span>target<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bimap</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">-</span> tolerance<span class=\\\"token punctuation\\\">,</span> x <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> tolerance<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">merge</span><span class=\\\"token punctuation\\\">(</span>isTolerant<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ap</span><span class=\\\"token punctuation\\\">(</span>M<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">chain</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token function\\\">liftFn</span><span class=\\\"token punctuation\\\">(</span>o <span class=\\\"token operator\\\">=></span>\\n        o<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cata</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n          LT<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">fail</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Too Low'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n          EQ<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">K</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">Right</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n          GT<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">fail</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Too High'</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">isTolerant</code> consisted of one ternary expression nested in another ternary expression - pretty easy to rewrite with our handy <code class=\\\"language-text\\\">ifElse</code>/<code class=\\\"language-text\\\">K</code> combination.</p>\\n<p>The second test, however, changes much more dramatically. We start by asking for the environment up front, then mapping over it, using our cool <code class=\\\"language-text\\\">Pair</code> logic to get our tolerance range, and feeding it to <code class=\\\"language-text\\\">isTolerant</code>, which leaves us with a <code class=\\\"language-text\\\">ReaderT Env (Either String (Int -&gt; Either String Int)</code>. For the folks at home staring at that in shock and horror (as I have, and do), that’s our <code class=\\\"language-text\\\">ReaderT Either</code> holding a function. We have that int as our parameter, of … let’s apply the int by <code class=\\\"language-text\\\">ap</code>ing the int wrapped in an <code class=\\\"language-text\\\">M.of</code>. This will gove us a <code class=\\\"language-text\\\">ReaderT Env Ord</code>. We <code class=\\\"language-text\\\">chain</code> over that, calling the <code class=\\\"language-text\\\">cata</code> function on the <code class=\\\"language-text\\\">Ord</code> to get our <code class=\\\"language-text\\\">ReaderT Env (Either String Int)</code>. Whew!</p>\\n<p>That was wordy, but I hope it made sense. We retain all the pieces from the last implementation, we just move them around a bit to fit our new structure. Great! One more test:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// thirdTest : Int -> ReaderT Env (Either String String)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">thirdTest</span> <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token function\\\">ask</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> target <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n      <span class=\\\"token function\\\">ifElse</span><span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">=></span> target <span class=\\\"token operator\\\">===</span> n<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">pass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Win'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">pass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Close Enough'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ap</span><span class=\\\"token punctuation\\\">(</span>M<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">chain</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">liftFn</span><span class=\\\"token punctuation\\\">(</span>I<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>The third test is like a combination of the last two. We replace the ternary with the <code class=\\\"language-text\\\">ifElse</code> helper, Wrapping our <code class=\\\"language-text\\\">Right</code>s in <code class=\\\"language-text\\\">K</code> again to discard the input. We call that on the result of <code class=\\\"language-text\\\">ask</code>ing for the environment, then <code class=\\\"language-text\\\">map</code>ping over it. We again <code class=\\\"language-text\\\">ap</code> over the wrapped function to apply the int. To unwrap a layer, we need to <code class=\\\"language-text\\\">chain</code> the <code class=\\\"language-text\\\">identity</code> combinator (here as <code class=\\\"language-text\\\">I</code>), again wrapping it in <code class=\\\"language-text\\\">liftFn</code>.</p>\\n<p>Cool, let’s put these together!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// logic :: Int -> ReaderT Env (Either String String)</span>\\n<span class=\\\"token keyword\\\">const</span> logic <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">pipeK</span><span class=\\\"token punctuation\\\">(</span>M<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">,</span> firstTest<span class=\\\"token punctuation\\\">,</span> secondTest<span class=\\\"token punctuation\\\">,</span> thirdTest<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">M.of</code> just puts a value into our monad stack, allowing us to <code class=\\\"language-text\\\">chain</code> it. Remember, from the last two tests? We use <code class=\\\"language-text\\\">pipeK</code> to put these together, like before. Let’s test it out:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// output :: Either a b -> ()</span>\\n<span class=\\\"token keyword\\\">const</span> output <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">either</span><span class=\\\"token punctuation\\\">(</span>str <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`[Left] </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>str<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> str <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`[Right] </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>str<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// _result :: Env -> Int -> ()</span>\\n<span class=\\\"token keyword\\\">const</span> _result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>logic<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">runWith</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> output<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// type Env</span>\\n<span class=\\\"token keyword\\\">const</span> env <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  target<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">23</span><span class=\\\"token punctuation\\\">,</span>\\n  tolerance<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// result :: Int -> ()</span>\\n<span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">_result</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token function\\\">result</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 'Too Low'</span>\\n<span class=\\\"token function\\\">result</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">22</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 'Close Enough'</span>\\n<span class=\\\"token function\\\">result</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 'You need to learn to follow instructions'</span></code></pre>\\n      </div>\\n<p>It works! But working with it is still pretty clunky … let’s fix that!</p>\\n<hr>\\n<h4>Looking Good, How ‘bout some IO, though?</h4>\\n<p>The logic is looking good, now let’s get us some interactivity! And, since we’re being monadic, and talking about input and output, you know what time it is: IO-O-O-O-O! the <code class=\\\"language-text\\\">IO</code> monad takes a function that side-effects, returning the function wrapped in an IO. The function is only run by calling <code class=\\\"language-text\\\">run</code> on the IO, starting the chain of events.</p>\\n<p>Our first interface will be a command-line one, so I’ll need to import some helper libraries:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> log <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./lib/log'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> IO <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> rls <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'readline-sync'</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>We’re still within <strong>evil-playground</strong>, so we import <code class=\\\"language-text\\\">log</code> from <code class=\\\"language-text\\\">./lib/log</code>. We grab the IO monad from <code class=\\\"language-text\\\">crocks</code>, and we import <code class=\\\"language-text\\\">readline-sync</code>, which gives us synchronous readline capabilities.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// printLine : String -> IO ()</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">printLine</span> <span class=\\\"token operator\\\">=</span> str <span class=\\\"token operator\\\">=></span> IO<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// readLine = () -> IO String</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">readLine</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> IO<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">(</span>rls<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">prompt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Here I define my <em>input</em> function, <code class=\\\"language-text\\\">readLine</code>, and my <em>output</em> function, <code class=\\\"language-text\\\">printLine</code>. <code class=\\\"language-text\\\">printLine</code> takes a string and returns an IO that wraps the action of printing that string to the console. <code class=\\\"language-text\\\">readLine</code> uses <code class=\\\"language-text\\\">prompt</code> from <code class=\\\"language-text\\\">readline-sync</code>, which prints out a prompt (I’m using the default <code class=\\\"language-text\\\">&#39;&gt; &#39;</code>) and waits for user input. Once the user hits enter, the input is returned as a String.</p>\\n<p>Now, let’s use these to prompt the user for a guess:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// getGuess : String -> IO Int</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">getGuess</span> <span class=\\\"token operator\\\">=</span> str <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token function\\\">printLine</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">chain</span><span class=\\\"token punctuation\\\">(</span>readLine<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>s <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>This function, when called, returns an IO that prints a message to the console, then waits for user input. It takes that input, which is a String, and converts it to an Integer (-ish. Javascript, right?) inside an IO. All this happens sequentially once <code class=\\\"language-text\\\">.run()</code> is called on the <code class=\\\"language-text\\\">IO</code> result.</p>\\n<h4>Uh, we’re getting a little crowded…</h4>\\n<p>And now, some housekeeping. Let’s clean up our files a bit:</p>\\n<p><strong>src/utils.js</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> Either<span class=\\\"token punctuation\\\">,</span> pipe <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> K <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks/combinators/constant'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> tagged <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'daggy'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> Left<span class=\\\"token punctuation\\\">,</span> Right <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> Either\\n\\n<span class=\\\"token comment\\\">// type Env</span>\\n<span class=\\\"token keyword\\\">const</span> Env <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">tagged</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Env'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'target'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'tolerance'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// fail :: String -> () -> Either String ()</span>\\n<span class=\\\"token keyword\\\">const</span> fail <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>Left<span class=\\\"token punctuation\\\">,</span> K<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// pass :: String -> () -> Either () String</span>\\n<span class=\\\"token keyword\\\">const</span> pass <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>Right<span class=\\\"token punctuation\\\">,</span> K<span class=\\\"token punctuation\\\">)</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  Env<span class=\\\"token punctuation\\\">,</span>\\n  fail<span class=\\\"token punctuation\\\">,</span>\\n  pass<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><strong>src/logic.js</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> Either<span class=\\\"token punctuation\\\">,</span> ReaderT<span class=\\\"token punctuation\\\">,</span> pipe<span class=\\\"token punctuation\\\">,</span> pipeK <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> branch <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks/Pair/branch'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> K <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks/combinators/constant'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> I <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks/combinators/identity'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> ifElse <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks/logic/ifElse'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> taggedSum <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'daggy'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> fail<span class=\\\"token punctuation\\\">,</span> pass <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./utils'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> M <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">ReaderT</span><span class=\\\"token punctuation\\\">(</span>Either<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> ask<span class=\\\"token punctuation\\\">,</span> liftFn <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> M\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> Right<span class=\\\"token punctuation\\\">,</span> Left <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> Either\\n\\n<span class=\\\"token comment\\\">// type Ord = LT | EQ | GT</span>\\n<span class=\\\"token keyword\\\">const</span> Ord <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">taggedSum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Ord'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  LT<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  EQ<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  GT<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// isTolerant : (Int, Int) -> Int -> Eq</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">isTolerant</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>low<span class=\\\"token punctuation\\\">,</span> high<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token function\\\">ifElse</span><span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">=></span> n <span class=\\\"token operator\\\">&lt;</span> low<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">K</span><span class=\\\"token punctuation\\\">(</span>Ord<span class=\\\"token punctuation\\\">.</span>LT<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">ifElse</span><span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">=></span> n <span class=\\\"token operator\\\">></span> high<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">K</span><span class=\\\"token punctuation\\\">(</span>Ord<span class=\\\"token punctuation\\\">.</span>GT<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">K</span><span class=\\\"token punctuation\\\">(</span>Ord<span class=\\\"token punctuation\\\">.</span>EQ<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// firstTest : Int -> ReaderT Env (Either String Int)</span>\\n<span class=\\\"token keyword\\\">const</span> firstTest <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">liftFn</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">ifElse</span><span class=\\\"token punctuation\\\">(</span>\\n    n <span class=\\\"token operator\\\">=></span> <span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">isNaN</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">&lt;=</span> n <span class=\\\"token operator\\\">&amp;&amp;</span> n <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">,</span>\\n    Right<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function\\\">fail</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'You need to learn to follow instructions'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// secondTest : Int -> ReaderT Env (Either String Int)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">secondTest</span> <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token function\\\">ask</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> tolerance<span class=\\\"token punctuation\\\">,</span> target <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n      <span class=\\\"token function\\\">branch</span><span class=\\\"token punctuation\\\">(</span>target<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bimap</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">-</span> tolerance<span class=\\\"token punctuation\\\">,</span> x <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> tolerance<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">merge</span><span class=\\\"token punctuation\\\">(</span>isTolerant<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ap</span><span class=\\\"token punctuation\\\">(</span>M<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">chain</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token function\\\">liftFn</span><span class=\\\"token punctuation\\\">(</span>o <span class=\\\"token operator\\\">=></span>\\n        o<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cata</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n          LT<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">fail</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Too Low'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n          EQ<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">K</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">Right</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n          GT<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">fail</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Too High'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// thirdTest : Int -> ReaderT Env (Either String String)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">thirdTest</span> <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token function\\\">ask</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> target <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n      <span class=\\\"token function\\\">ifElse</span><span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">=></span> target <span class=\\\"token operator\\\">===</span> n<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">pass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Win'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">pass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Close Enough'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ap</span><span class=\\\"token punctuation\\\">(</span>M<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">chain</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">liftFn</span><span class=\\\"token punctuation\\\">(</span>I<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// runTests :: Int -> ReaderT Env (Either String String)</span>\\n<span class=\\\"token keyword\\\">const</span> runTests <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">pipeK</span><span class=\\\"token punctuation\\\">(</span>M<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">,</span> firstTest<span class=\\\"token punctuation\\\">,</span> secondTest<span class=\\\"token punctuation\\\">,</span> thirdTest<span class=\\\"token punctuation\\\">)</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  runTests<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><strong>src/cli.js</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> log <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'../lib/log'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> IO <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> rls <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'readline-sync'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// printLine : String -> IO ()</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">printLine</span> <span class=\\\"token operator\\\">=</span> str <span class=\\\"token operator\\\">=></span> IO<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// readLine = () -> IO String</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">readLine</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> IO<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">(</span>rls<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">prompt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// getGuess : String -> IO Int</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">getGuess</span> <span class=\\\"token operator\\\">=</span> str <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token function\\\">printLine</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">chain</span><span class=\\\"token punctuation\\\">(</span>readLine<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>s <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  getGuess<span class=\\\"token punctuation\\\">,</span>\\n  printLine<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><strong>index.js</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> pipe <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks/helpers/pipe'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> either <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks/pointfree/either'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> runWith <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks/pointfree/runWith'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> runTests <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./src/logic'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> printLine<span class=\\\"token punctuation\\\">,</span> getGuess <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./src/cli'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> Env <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./src/utils'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// output : Either String String -> IO ()</span>\\n<span class=\\\"token keyword\\\">const</span> output <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">either</span><span class=\\\"token punctuation\\\">(</span>printLine<span class=\\\"token punctuation\\\">,</span> printLine<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// logic : Env -> Int -> Either String String</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">logic</span> <span class=\\\"token operator\\\">=</span> env <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>runTests<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">runWith</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// main : Env -> IO ()</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">main</span> <span class=\\\"token operator\\\">=</span> env <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token function\\\">getGuess</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`Guess a number between 1 and 100`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">logic</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">chain</span><span class=\\\"token punctuation\\\">(</span>output<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">Env</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">23</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">run</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>We rewrite <code class=\\\"language-text\\\">output</code> to just print the message either way. <code class=\\\"language-text\\\">main</code> is our whole game! We print out instructions, wait for user input, then run that input through the logic, providing it an environment, then send it through the <code class=\\\"language-text\\\">output</code> so we can see the result of our guess. <em>et viola!</em></p>\\n<h4>That’s about as much as I can take</h4>\\n<p>Now we have a guessing game where the user can guess once. Pretty neat, but that isn’t much. Also, it just runs without ever terminating, but we can’t keep guessing if we get it wrong. We’ll fix that next time. Stay tuned…</p>\",\"frontmatter\":{\"path\":\"/what-the-adt-02\",\"title\":\"What the ADT 02 - A UI Worth Commanding\",\"date\":\"May 12, 2018\"}}},\"pathContext\":{\"slug\":\"/what-the-adt-02/\",\"previous\":{\"fields\":{\"slug\":\"/what-the-adt-01/\"},\"frontmatter\":{\"path\":\"/what-the-adt-01\",\"title\":\"What the ADT 01 - Getting to the Heart of Things\"}},\"next\":{\"fields\":{\"slug\":\"/what-the-adt-03/\"},\"frontmatter\":{\"path\":\"/what-the-adt-03\",\"title\":\"What the ADT 03 - More Than Just a Single-Use\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---what-the-adt-02-d29959f47e03c380148a.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"(shatteredaesthetic)\",\"author\":\"Jason Polhemus\"}},\"markdownRemark\":{\"id\":\"/Users/travis/build/shatteredaesthetic/shatteredaesthetic.github.io/content/what-the-adt-02.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>Part 2 - Baby’s First UI, plus Prettification</h2>\\n<p>Ahoy-hoy! When we left off, we had a function, <code class=\\\"language-text\\\">logic</code> that, when given an environment and an integer, weighed the integer against a target in the environment. But…it’s not very ergonomic, is it? A player would have to edit the code and refresh it in the terminal. That allows them to see the environment, and…well, that’s not really a game, is it? More like reading comprehension.</p>\\n<p>We should create an interface for the player, something that would allow them to actually guess. We’ll start with a command line interface. The player will be asked for a number, and we’ll analyze their guess! Simple enough, but let’s start with a quick rewrite of our code so far. All the code is <a href=\\\"https://github.com/shatteredaesthetic/cipher-guess\\\">in this repo</a>, in the <code class=\\\"language-text\\\">what-adt-02</code> branch, if you’d like to follow along.</p>\\n<h4>Perhaps a little refresher…</h4>\\n<p>Let’s get a recap of what we have:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// index.js</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> Either<span class=\\\"token punctuation\\\">,</span> Reader<span class=\\\"token punctuation\\\">,</span> pipe<span class=\\\"token punctuation\\\">,</span> pipeK <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> branch <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks/Pair/branch'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> either <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks/pointfree/either'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> runWith <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks/pointfree/runWith'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> taggedSum <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'daggy'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> Right<span class=\\\"token punctuation\\\">,</span> Left <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> Either\\n\\n<span class=\\\"token keyword\\\">const</span> Ord <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">taggedSum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Ord'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  LT<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  EQ<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  GT<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// isTolerant : (Int, Int) -> Int -> Eq</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">isTolerant</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>low<span class=\\\"token punctuation\\\">,</span> high<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> n <span class=\\\"token operator\\\">=></span>\\n  n <span class=\\\"token operator\\\">&lt;</span> low <span class=\\\"token operator\\\">?</span> Ord<span class=\\\"token punctuation\\\">.</span>LT <span class=\\\"token punctuation\\\">:</span> n <span class=\\\"token operator\\\">></span> high <span class=\\\"token operator\\\">?</span> Ord<span class=\\\"token punctuation\\\">.</span>GT <span class=\\\"token punctuation\\\">:</span> Ord<span class=\\\"token punctuation\\\">.</span>EQ\\n\\n<span class=\\\"token comment\\\">// firstTest : Int -> Either String Int</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">firstTest</span> <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">&lt;=</span> n <span class=\\\"token operator\\\">&amp;&amp;</span> n <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">100</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">isNaN</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">Right</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">Left</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'You need to learn to follow instructions'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// secondTest : Env -> Int -> Either String Int</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">secondTest</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> target<span class=\\\"token punctuation\\\">,</span> tolerance <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> n <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token function\\\">branch</span><span class=\\\"token punctuation\\\">(</span>target<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bimap</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">-</span> tolerance<span class=\\\"token punctuation\\\">,</span> x <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> tolerance<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">merge</span><span class=\\\"token punctuation\\\">(</span>isTolerant<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span> n<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cata</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      LT<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">Left</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Too Low'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      EQ<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">Right</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      GT<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">Left</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Too High'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// thirdTest : Env -> Int -> Either String String</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">thirdTest</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> target <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> n <span class=\\\"token operator\\\">=></span>\\n  target <span class=\\\"token operator\\\">===</span> n <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">Right</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Win'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">Right</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Close Enough'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// runTests : Env -> Int -> Either String Int</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">runTests</span> <span class=\\\"token operator\\\">=</span> env <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">pipeK</span><span class=\\\"token punctuation\\\">(</span>firstTest<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">secondTest</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">thirdTest</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// gameLogic : Either String Int -> Reader (Either String String)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">gameLogic</span> <span class=\\\"token operator\\\">=</span> either <span class=\\\"token operator\\\">=></span> Reader<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ask</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>env <span class=\\\"token operator\\\">=></span> either<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">chain</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">runTests</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// logic : Env -> Int -> Either String String)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">logic</span> <span class=\\\"token operator\\\">=</span> env <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>Either<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">,</span> gameLogic<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">runWith</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// output : Either String String -> ()</span>\\n<span class=\\\"token keyword\\\">const</span> output <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">either</span><span class=\\\"token punctuation\\\">(</span>\\n  str <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`Left: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>str<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  str <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`Right: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>str<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// env : Env</span>\\n<span class=\\\"token keyword\\\">const</span> env <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  target<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">23</span><span class=\\\"token punctuation\\\">,</span>\\n  tolerance<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">logic</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> output<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token function\\\">result</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">21</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// logs: 'Right: Close Enough'</span></code></pre>\\n      </div>\\n<p>It works, but we aren’t really using the <code class=\\\"language-text\\\">Reader</code> to it’s full potential. Right now we’re unwrapping the <code class=\\\"language-text\\\">Reader</code> and passing the <code class=\\\"language-text\\\">env</code> to <code class=\\\"language-text\\\">runTests</code>, which distributes it further. We’re making good use of the <code class=\\\"language-text\\\">Either</code> … what if we could extend the functionality of the <code class=\\\"language-text\\\">Reader</code> into out <code class=\\\"language-text\\\">Either</code>s.</p>\\n<h4>There must be a better way!</h4>\\n<p>It turns out, we can! What we want, essentially, is a Reader that always holds an Either. <code class=\\\"language-text\\\">crocks</code> has our back, providing a handy <code class=\\\"language-text\\\">ReaderT</code> ADT. This is a <code class=\\\"language-text\\\">Reader Transformer</code>, which means that, once provided with a monad, spits out that monad, with an additional Reader interface. For us, that translates into an <code class=\\\"language-text\\\">Either</code> that has it’s own configuration to play with. Let’s rewrite our test functions to use this, to get a better handle one what’s happening. But first, some infrastructure:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> ReaderT <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> ifElse <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks/logic/ifElse'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> K <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks/combinators/constant'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> I <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks/combinators/identity'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> M <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">ReaderT</span><span class=\\\"token punctuation\\\">(</span>Either<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> ask<span class=\\\"token punctuation\\\">,</span> liftFn <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> M\\n\\n<span class=\\\"token comment\\\">// fail : String -> () -> Either String ()</span>\\n<span class=\\\"token keyword\\\">const</span> fail <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>Left<span class=\\\"token punctuation\\\">,</span> K<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// pass : String -> () -> Either () String</span>\\n<span class=\\\"token keyword\\\">const</span> pass <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>Right<span class=\\\"token punctuation\\\">,</span> K<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>We’ll import some new functions from <code class=\\\"language-text\\\">crocks</code>, grabbing the <code class=\\\"language-text\\\">ReaderT</code>, as well as a cool helper function <code class=\\\"language-text\\\">ifElse</code> that wraps ternary expressions, and two combinators, <code class=\\\"language-text\\\">constant</code> and <code class=\\\"language-text\\\">identity</code> (renamed as <code class=\\\"language-text\\\">K</code> and <code class=\\\"language-text\\\">I</code>, respectively).</p>\\n<p>Next, we create our transformer <code class=\\\"language-text\\\">M</code>, giving the <code class=\\\"language-text\\\">Either</code> object to the <code class=\\\"language-text\\\">ReaderT</code> constructor. For convenience, we then pull the <code class=\\\"language-text\\\">liftFn</code> and <code class=\\\"language-text\\\">ask</code> functions off of <code class=\\\"language-text\\\">M</code>. The last two functions just allow us to have more readability in our tests. Speaking of, let’s look at our first one:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// firstTest : Int -> ReaderT Env (Either String Int)</span>\\n<span class=\\\"token keyword\\\">const</span> firstTest <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">liftFn</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">ifElse</span><span class=\\\"token punctuation\\\">(</span>\\n    n <span class=\\\"token operator\\\">=></span> <span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">isNaN</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">&lt;=</span> n <span class=\\\"token operator\\\">&amp;&amp;</span> n <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">,</span>\\n    Right<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function\\\">fail</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'You need to learn to follow instructions'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Let’s look at the first test. It looks very similar to the previous one. We changed the ternary expression in the first version to use <code class=\\\"language-text\\\">ifElse</code>. It takes a predicate function, followed by a function to call for a true and a false outcome of the predicate. The input to the predicate is passed to the result functions. The ‘true’ branch has a <code class=\\\"language-text\\\">Right</code>, to wrap a true to pass on. The ‘false’ branch calls fail with a message fed in. If you got here, you go no farther.</p>\\n<p>So far, so good: we’ve replicated the previous behavior. To get this to <code class=\\\"language-text\\\">chain</code> on our <code class=\\\"language-text\\\">M</code>, though, we’ll need to to return a <code class=\\\"language-text\\\">ReaderT Env (Either String Int)</code>. To do this, we only need to wrap our current function in a liftFn. First test - check. Let’s move on:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// isTolerant : (Int, Int) -> Int -> Eq</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">isTolerant</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>low<span class=\\\"token punctuation\\\">,</span> high<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">ifElse</span><span class=\\\"token punctuation\\\">(</span>\\n  n <span class=\\\"token operator\\\">&lt;</span> low<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">K</span><span class=\\\"token punctuation\\\">(</span>Ord<span class=\\\"token punctuation\\\">.</span>LT<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">ifElse</span><span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">></span> high<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">K</span><span class=\\\"token punctuation\\\">(</span>Ord<span class=\\\"token punctuation\\\">.</span>GT<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">K</span><span class=\\\"token punctuation\\\">(</span>Ord<span class=\\\"token punctuation\\\">.</span>EQ<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// secondTest : Int -> ReaderT Env (Either String Int)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">secondTest</span> <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token function\\\">ask</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> tolerance<span class=\\\"token punctuation\\\">,</span> target <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n      <span class=\\\"token function\\\">branch</span><span class=\\\"token punctuation\\\">(</span>target<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bimap</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">-</span> tolerance<span class=\\\"token punctuation\\\">,</span> x <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> tolerance<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">merge</span><span class=\\\"token punctuation\\\">(</span>isTolerant<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ap</span><span class=\\\"token punctuation\\\">(</span>M<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">chain</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token function\\\">liftFn</span><span class=\\\"token punctuation\\\">(</span>o <span class=\\\"token operator\\\">=></span>\\n        o<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cata</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n          LT<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">fail</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Too Low'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n          EQ<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">K</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">Right</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n          GT<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">fail</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Too High'</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">isTolerant</code> consisted of one ternary expression nested in another ternary expression - pretty easy to rewrite with our handy <code class=\\\"language-text\\\">ifElse</code>/<code class=\\\"language-text\\\">K</code> combination.</p>\\n<p>The second test, however, changes much more dramatically. We start by asking for the environment up front, then mapping over it, using our cool <code class=\\\"language-text\\\">Pair</code> logic to get our tolerance range, and feeding it to <code class=\\\"language-text\\\">isTolerant</code>, which leaves us with a <code class=\\\"language-text\\\">ReaderT Env (Either String (Int -&gt; Either String Int)</code>. For the folks at home staring at that in shock and horror (as I have, and do), that’s our <code class=\\\"language-text\\\">ReaderT Either</code> holding a function. We have that int as our parameter, of … let’s apply the int by <code class=\\\"language-text\\\">ap</code>ing the int wrapped in an <code class=\\\"language-text\\\">M.of</code>. This will gove us a <code class=\\\"language-text\\\">ReaderT Env Ord</code>. We <code class=\\\"language-text\\\">chain</code> over that, calling the <code class=\\\"language-text\\\">cata</code> function on the <code class=\\\"language-text\\\">Ord</code> to get our <code class=\\\"language-text\\\">ReaderT Env (Either String Int)</code>. Whew!</p>\\n<p>That was wordy, but I hope it made sense. We retain all the pieces from the last implementation, we just move them around a bit to fit our new structure. Great! One more test:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// thirdTest : Int -> ReaderT Env (Either String String)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">thirdTest</span> <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token function\\\">ask</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> target <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n      <span class=\\\"token function\\\">ifElse</span><span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">=></span> target <span class=\\\"token operator\\\">===</span> n<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">pass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Win'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">pass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Close Enough'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ap</span><span class=\\\"token punctuation\\\">(</span>M<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">chain</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">liftFn</span><span class=\\\"token punctuation\\\">(</span>I<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>The third test is like a combination of the last two. We replace the ternary with the <code class=\\\"language-text\\\">ifElse</code> helper, Wrapping our <code class=\\\"language-text\\\">Right</code>s in <code class=\\\"language-text\\\">K</code> again to discard the input. We call that on the result of <code class=\\\"language-text\\\">ask</code>ing for the environment, then <code class=\\\"language-text\\\">map</code>ping over it. We again <code class=\\\"language-text\\\">ap</code> over the wrapped function to apply the int. To unwrap a layer, we need to <code class=\\\"language-text\\\">chain</code> the <code class=\\\"language-text\\\">identity</code> combinator (here as <code class=\\\"language-text\\\">I</code>), again wrapping it in <code class=\\\"language-text\\\">liftFn</code>.</p>\\n<p>Cool, let’s put these together!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// logic :: Int -> ReaderT Env (Either String String)</span>\\n<span class=\\\"token keyword\\\">const</span> logic <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">pipeK</span><span class=\\\"token punctuation\\\">(</span>M<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">,</span> firstTest<span class=\\\"token punctuation\\\">,</span> secondTest<span class=\\\"token punctuation\\\">,</span> thirdTest<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">M.of</code> just puts a value into our monad stack, allowing us to <code class=\\\"language-text\\\">chain</code> it. Remember, from the last two tests? We use <code class=\\\"language-text\\\">pipeK</code> to put these together, like before. Let’s test it out:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// output :: Either a b -> ()</span>\\n<span class=\\\"token keyword\\\">const</span> output <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">either</span><span class=\\\"token punctuation\\\">(</span>str <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`[Left] </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>str<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> str <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`[Right] </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>str<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// _result :: Env -> Int -> ()</span>\\n<span class=\\\"token keyword\\\">const</span> _result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>logic<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">runWith</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> output<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// type Env</span>\\n<span class=\\\"token keyword\\\">const</span> env <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  target<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">23</span><span class=\\\"token punctuation\\\">,</span>\\n  tolerance<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// result :: Int -> ()</span>\\n<span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">_result</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token function\\\">result</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 'Too Low'</span>\\n<span class=\\\"token function\\\">result</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">22</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 'Close Enough'</span>\\n<span class=\\\"token function\\\">result</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 'You need to learn to follow instructions'</span></code></pre>\\n      </div>\\n<p>It works! But working with it is still pretty clunky … let’s fix that!</p>\\n<hr>\\n<h4>Looking Good, How ‘bout some IO, though?</h4>\\n<p>The logic is looking good, now let’s get us some interactivity! And, since we’re being monadic, and talking about input and output, you know what time it is: IO-O-O-O-O! the <code class=\\\"language-text\\\">IO</code> monad takes a function that side-effects, returning the function wrapped in an IO. The function is only run by calling <code class=\\\"language-text\\\">run</code> on the IO, starting the chain of events.</p>\\n<p>Our first interface will be a command-line one, so I’ll need to import some helper libraries:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> log <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./lib/log'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> IO <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> rls <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'readline-sync'</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>We’re still within <strong>evil-playground</strong>, so we import <code class=\\\"language-text\\\">log</code> from <code class=\\\"language-text\\\">./lib/log</code>. We grab the IO monad from <code class=\\\"language-text\\\">crocks</code>, and we import <code class=\\\"language-text\\\">readline-sync</code>, which gives us synchronous readline capabilities.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// printLine : String -> IO ()</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">printLine</span> <span class=\\\"token operator\\\">=</span> str <span class=\\\"token operator\\\">=></span> IO<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// readLine = () -> IO String</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">readLine</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> IO<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">(</span>rls<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">prompt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Here I define my <em>input</em> function, <code class=\\\"language-text\\\">readLine</code>, and my <em>output</em> function, <code class=\\\"language-text\\\">printLine</code>. <code class=\\\"language-text\\\">printLine</code> takes a string and returns an IO that wraps the action of printing that string to the console. <code class=\\\"language-text\\\">readLine</code> uses <code class=\\\"language-text\\\">prompt</code> from <code class=\\\"language-text\\\">readline-sync</code>, which prints out a prompt (I’m using the default <code class=\\\"language-text\\\">&#39;&gt; &#39;</code>) and waits for user input. Once the user hits enter, the input is returned as a String.</p>\\n<p>Now, let’s use these to prompt the user for a guess:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// getGuess : String -> IO Int</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">getGuess</span> <span class=\\\"token operator\\\">=</span> str <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token function\\\">printLine</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">chain</span><span class=\\\"token punctuation\\\">(</span>readLine<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>s <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>This function, when called, returns an IO that prints a message to the console, then waits for user input. It takes that input, which is a String, and converts it to an Integer (-ish. Javascript, right?) inside an IO. All this happens sequentially once <code class=\\\"language-text\\\">.run()</code> is called on the <code class=\\\"language-text\\\">IO</code> result.</p>\\n<h4>Uh, we’re getting a little crowded…</h4>\\n<p>And now, some housekeeping. Let’s clean up our files a bit:</p>\\n<p><strong>src/utils.js</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> Either<span class=\\\"token punctuation\\\">,</span> pipe <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> K <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks/combinators/constant'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> tagged <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'daggy'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> Left<span class=\\\"token punctuation\\\">,</span> Right <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> Either\\n\\n<span class=\\\"token comment\\\">// type Env</span>\\n<span class=\\\"token keyword\\\">const</span> Env <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">tagged</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Env'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'target'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'tolerance'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// fail :: String -> () -> Either String ()</span>\\n<span class=\\\"token keyword\\\">const</span> fail <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>Left<span class=\\\"token punctuation\\\">,</span> K<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// pass :: String -> () -> Either () String</span>\\n<span class=\\\"token keyword\\\">const</span> pass <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>Right<span class=\\\"token punctuation\\\">,</span> K<span class=\\\"token punctuation\\\">)</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  Env<span class=\\\"token punctuation\\\">,</span>\\n  fail<span class=\\\"token punctuation\\\">,</span>\\n  pass<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><strong>src/logic.js</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> Either<span class=\\\"token punctuation\\\">,</span> ReaderT<span class=\\\"token punctuation\\\">,</span> pipe<span class=\\\"token punctuation\\\">,</span> pipeK <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> branch <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks/Pair/branch'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> K <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks/combinators/constant'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> I <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks/combinators/identity'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> ifElse <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks/logic/ifElse'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> taggedSum <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'daggy'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> fail<span class=\\\"token punctuation\\\">,</span> pass <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./utils'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> M <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">ReaderT</span><span class=\\\"token punctuation\\\">(</span>Either<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> ask<span class=\\\"token punctuation\\\">,</span> liftFn <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> M\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> Right<span class=\\\"token punctuation\\\">,</span> Left <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> Either\\n\\n<span class=\\\"token comment\\\">// type Ord = LT | EQ | GT</span>\\n<span class=\\\"token keyword\\\">const</span> Ord <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">taggedSum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Ord'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  LT<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  EQ<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  GT<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// isTolerant : (Int, Int) -> Int -> Eq</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">isTolerant</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>low<span class=\\\"token punctuation\\\">,</span> high<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token function\\\">ifElse</span><span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">=></span> n <span class=\\\"token operator\\\">&lt;</span> low<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">K</span><span class=\\\"token punctuation\\\">(</span>Ord<span class=\\\"token punctuation\\\">.</span>LT<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">ifElse</span><span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">=></span> n <span class=\\\"token operator\\\">></span> high<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">K</span><span class=\\\"token punctuation\\\">(</span>Ord<span class=\\\"token punctuation\\\">.</span>GT<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">K</span><span class=\\\"token punctuation\\\">(</span>Ord<span class=\\\"token punctuation\\\">.</span>EQ<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// firstTest : Int -> ReaderT Env (Either String Int)</span>\\n<span class=\\\"token keyword\\\">const</span> firstTest <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">liftFn</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">ifElse</span><span class=\\\"token punctuation\\\">(</span>\\n    n <span class=\\\"token operator\\\">=></span> <span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">isNaN</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">&lt;=</span> n <span class=\\\"token operator\\\">&amp;&amp;</span> n <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">,</span>\\n    Right<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function\\\">fail</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'You need to learn to follow instructions'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// secondTest : Int -> ReaderT Env (Either String Int)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">secondTest</span> <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token function\\\">ask</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> tolerance<span class=\\\"token punctuation\\\">,</span> target <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n      <span class=\\\"token function\\\">branch</span><span class=\\\"token punctuation\\\">(</span>target<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bimap</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">-</span> tolerance<span class=\\\"token punctuation\\\">,</span> x <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> tolerance<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">merge</span><span class=\\\"token punctuation\\\">(</span>isTolerant<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ap</span><span class=\\\"token punctuation\\\">(</span>M<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">chain</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token function\\\">liftFn</span><span class=\\\"token punctuation\\\">(</span>o <span class=\\\"token operator\\\">=></span>\\n        o<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cata</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n          LT<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">fail</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Too Low'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n          EQ<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">K</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">Right</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n          GT<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">fail</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Too High'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// thirdTest : Int -> ReaderT Env (Either String String)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">thirdTest</span> <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token function\\\">ask</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> target <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n      <span class=\\\"token function\\\">ifElse</span><span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">=></span> target <span class=\\\"token operator\\\">===</span> n<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">pass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Win'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">pass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Close Enough'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ap</span><span class=\\\"token punctuation\\\">(</span>M<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">chain</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">liftFn</span><span class=\\\"token punctuation\\\">(</span>I<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// runTests :: Int -> ReaderT Env (Either String String)</span>\\n<span class=\\\"token keyword\\\">const</span> runTests <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">pipeK</span><span class=\\\"token punctuation\\\">(</span>M<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">,</span> firstTest<span class=\\\"token punctuation\\\">,</span> secondTest<span class=\\\"token punctuation\\\">,</span> thirdTest<span class=\\\"token punctuation\\\">)</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  runTests<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><strong>src/cli.js</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> log <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'../lib/log'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> IO <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> rls <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'readline-sync'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// printLine : String -> IO ()</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">printLine</span> <span class=\\\"token operator\\\">=</span> str <span class=\\\"token operator\\\">=></span> IO<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// readLine = () -> IO String</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">readLine</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> IO<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">(</span>rls<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">prompt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// getGuess : String -> IO Int</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">getGuess</span> <span class=\\\"token operator\\\">=</span> str <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token function\\\">printLine</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">chain</span><span class=\\\"token punctuation\\\">(</span>readLine<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>s <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  getGuess<span class=\\\"token punctuation\\\">,</span>\\n  printLine<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><strong>index.js</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> pipe <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks/helpers/pipe'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> either <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks/pointfree/either'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> runWith <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'crocks/pointfree/runWith'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> runTests <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./src/logic'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> printLine<span class=\\\"token punctuation\\\">,</span> getGuess <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./src/cli'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> Env <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./src/utils'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// output : Either String String -> IO ()</span>\\n<span class=\\\"token keyword\\\">const</span> output <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">either</span><span class=\\\"token punctuation\\\">(</span>printLine<span class=\\\"token punctuation\\\">,</span> printLine<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// logic : Env -> Int -> Either String String</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">logic</span> <span class=\\\"token operator\\\">=</span> env <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>runTests<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">runWith</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// main : Env -> IO ()</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">main</span> <span class=\\\"token operator\\\">=</span> env <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token function\\\">getGuess</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`Guess a number between 1 and 100`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">logic</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">chain</span><span class=\\\"token punctuation\\\">(</span>output<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">Env</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">23</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">run</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>We rewrite <code class=\\\"language-text\\\">output</code> to just print the message either way. <code class=\\\"language-text\\\">main</code> is our whole game! We print out instructions, wait for user input, then run that input through the logic, providing it an environment, then send it through the <code class=\\\"language-text\\\">output</code> so we can see the result of our guess. <em>et viola!</em></p>\\n<h4>That’s about as much as I can take</h4>\\n<p>Now we have a guessing game where the user can guess once. Pretty neat, but that isn’t much. Also, it just runs without ever terminating, but we can’t keep guessing if we get it wrong. We’ll fix that next time. Stay tuned…</p>\",\"frontmatter\":{\"path\":\"/what-the-adt-02\",\"title\":\"What the ADT 02 - A UI Worth Commanding\",\"date\":\"May 12, 2018\"}}},\"pathContext\":{\"slug\":\"/what-the-adt-02/\",\"previous\":{\"fields\":{\"slug\":\"/what-the-adt-01/\"},\"frontmatter\":{\"path\":\"/what-the-adt-01\",\"title\":\"What the ADT 01 - Getting to the Heart of Things\"}},\"next\":{\"fields\":{\"slug\":\"/what-the-adt-03/\"},\"frontmatter\":{\"path\":\"/what-the-adt-03\",\"title\":\"What the ADT 03 - More Than Just a Single-Use\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/what-the-adt-02.json\n// module id = 657\n// module chunks = 213318659538528"],"sourceRoot":""}