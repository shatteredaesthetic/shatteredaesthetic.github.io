{"version":3,"sources":["webpack:///path---what-the-adt-p-01-6882842d5c56446a5cb2.js","webpack:///./.cache/json/what-the-adt-p-01.json"],"names":["webpackJsonp","660","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","path","date","pathContext","slug","previous","fields","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,uBAAAC,OAAA,mBAA0DC,gBAAmBC,GAAA,qIAAAC,KAAA;AAAuqtDC,aAAg/BC,KAAA,oBAAAN,MAAA,4DAAAO,KAAA,sBAA2HC,aAAgBC,KAAA,qBAAAC,UAAwCC,QAAUF,KAAA,qBAA2BJ,aAAgBC,KAAA,mBAAAN,MAAA,wDAAyFY,MAASD,QAAUF,KAAA,sBAA4BJ,aAAgBC,KAAA,oBAAAN,MAAA","file":"path---what-the-adt-p-01-6882842d5c56446a5cb2.js","sourcesContent":["webpackJsonp([148761740396195],{\n\n/***/ 660:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"(shatteredaesthetic)\",\"author\":\"Jason Polhemus\"}},\"markdownRemark\":{\"id\":\"/Users/travis/build/shatteredaesthetic/shatteredaesthetic.github.io/content/what-the-adt-p01.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>Purescript, Part 1: Up to speed</h2>\\n<p>Here we are, again. I know, I know: it’s been awhile - exactly what I didn’t what to have happen. The plan was posts to have much more frequently, but, you know - life.</p>\\n<p>Anyway, I thought we’d get back into the swing of things by getting completely out of our swing - and getting out of our programming language. We’ve been jumping through some hoops to make our style work in javascript; perhaps it’s time we tried our hand at a real programming language: something with a type system, with currying by default, with recursion. My choice is Purescript.</p>\\n<hr>\\n<p>Enough talk, let’s begin. All purescript projects begin with declaring our module and importing some libraries (most importantly, the <code class=\\\"language-text\\\">Prelude</code>). Because our file is called <code class=\\\"language-text\\\">Main.purs</code>, our module is also called <code class=\\\"language-text\\\">Main</code>. Let’s see it:</p>\\n<blockquote>\\n<p>Note: the purescript code samples are labeled as <em>haskell</em> so I can get come syntax highlighting. It makes it much easier to read the code, and they’re close enough to make it work.</p>\\n</blockquote>\\n<p><em>./src/Main.purs</em></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-haskell\\\"><code class=\\\"language-haskell\\\"><span class=\\\"token keyword\\\">module</span> <span class=\\\"token constant\\\">Main</span> <span class=\\\"token keyword\\\">where</span>\\n\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Prelude</span></code></pre>\\n      </div>\\n<p>Let’s start by defining some types. We’re thinking forward to future functionality, so we’re going to abandon our <code class=\\\"language-text\\\">ReaderT</code> for something a little more beefy: an <code class=\\\"language-text\\\">RWS</code> monad. This is basically a <code class=\\\"language-text\\\">Reader</code>, a <code class=\\\"language-text\\\">Writer</code>, and a <code class=\\\"language-text\\\">State</code> monad, all rolled up into one big ball of useful functionality.</p>\\n<p><em>./src/Main.purs</em></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-haskell\\\"><code class=\\\"language-haskell\\\"><span class=\\\"token keyword\\\">newtype</span> <span class=\\\"token constant\\\">GameEnvironment</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">GameEnvironment</span>\\n  <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token hvariable\\\">low</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">high</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">tolerance</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token hvariable\\\">gameEnvironment</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">GameEnvironment</span>\\n<span class=\\\"token hvariable\\\">gameEnvironment</span> <span class=\\\"token hvariable\\\">l</span> <span class=\\\"token hvariable\\\">h</span> <span class=\\\"token hvariable\\\">tol</span> <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token constant\\\">GameEnvironment</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token hvariable\\\">low</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token hvariable\\\">l</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">high</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token hvariable\\\">h</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">tolerance</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token hvariable\\\">tol</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">data</span> <span class=\\\"token constant\\\">GameState</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">GameState</span> <span class=\\\"token constant\\\">Int</span>\\n\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token constant\\\">Log</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">Array</span> <span class=\\\"token constant\\\">String</span>\\n\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token constant\\\">Game</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">RWS</span> <span class=\\\"token constant\\\">GameEnvironment</span> <span class=\\\"token constant\\\">Log</span> <span class=\\\"token constant\\\">GameState</span></code></pre>\\n      </div>\\n<p>We feed our <code class=\\\"language-text\\\">RWS</code> with and <code class=\\\"language-text\\\">env</code> for the <code class=\\\"language-text\\\">Reader</code>, a monoid for the <code class=\\\"language-text\\\">Writer</code>, and a type holding the state for the <code class=\\\"language-text\\\">State</code>. Our env is a newtype that holds a record containing the same three things that the <code class=\\\"language-text\\\">Config</code><sup>*</sup> held in the javascript version: our <code class=\\\"language-text\\\">high</code> and <code class=\\\"language-text\\\">low</code> bounds, and the tolerance for our answer. Then we define a constructor function for our <code class=\\\"language-text\\\">GameEnvironment</code> type.</p>\\n<p>GameState is a sum type with one constructor, and the monoid we’ll be using will be an <code class=\\\"language-text\\\">Array</code> of <code class=\\\"language-text\\\">Strings</code>. With these we define our <code class=\\\"language-text\\\">Game</code> type as an <code class=\\\"language-text\\\">RWS</code> monad with the aforementioned type populating it. So far, so good. Now what?</p>\\n<p>I guess we can start with a function that will play the game. Let’s call it <code class=\\\"language-text\\\">game</code>!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-haskell\\\"><code class=\\\"language-haskell\\\"><span class=\\\"token hvariable\\\">game</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Game</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">Maybe</span> <span class=\\\"token constant\\\">Int</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token hvariable\\\">game</span> <span class=\\\"token hvariable\\\">guess</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span></code></pre>\\n      </div>\\n<p>I’ll stop here so I can explain this a bit. Our function will take an Int which is the guess from the player. It will return a <code class=\\\"language-text\\\">Game (Maybe Int)</code>, our monad that’s been parameterized with a <code class=\\\"language-text\\\">Maybe Int</code>. I chose a <code class=\\\"language-text\\\">Maybe</code> so I could indicate when the guess was no good with a <code class=\\\"language-text\\\">Nothing</code>, (we don’t return the error messages like before<sup>*</sup>…you’ll see), and return the target with the winning guess. Who knows, maybe we’ll do something cool with it in the future.</p>\\n<p>The <code class=\\\"language-text\\\">do</code> is for Purescript’s do-notation. Since monads allow us to define sequential computations, as can use do-notation as a syntactic sugar around all the <code class=\\\"language-text\\\">bind</code>ing we’d otherwise do (same as our <code class=\\\"language-text\\\">chain</code> function in javascriptland). I’ll leave <a href=\\\"\\\">this</a> as a far better explanation than I have time to give here.</p>\\n<p>We need some more imports to make this work, so let’s get them:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-haskell\\\"><code class=\\\"language-haskell\\\"><span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Data.Array <span class=\\\"token keyword\\\">as</span> A</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Control.Monad.RWS</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">RWS</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Control.Monad.Reader.Class</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">ask</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Control.Monad.State.Class</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">get</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Control.Monad.Writer.Class</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">tell</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Data.Maybe</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">Maybe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">..</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>What have we got here? We need to grab <code class=\\\"language-text\\\">get</code> from <code class=\\\"language-text\\\">State</code>, <code class=\\\"language-text\\\">ask</code> from <code class=\\\"language-text\\\">Reader</code>, and <code class=\\\"language-text\\\">tell</code> from <code class=\\\"language-text\\\">Writer</code>, from their respective homes. We also get <code class=\\\"language-text\\\">Maybe</code> from it’s home, making sure to add the <code class=\\\"language-text\\\">(..)</code> so we have access to the constructors. We qualify our <code class=\\\"language-text\\\">Array</code> import, placing them under the namespace of <code class=\\\"language-text\\\">A</code>.</p>\\n<p>Okay, let’s continue:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-haskell\\\"><code class=\\\"language-haskell\\\"><span class=\\\"token hvariable\\\">game</span> <span class=\\\"token hvariable\\\">guess</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n  <span class=\\\"token constant\\\">GameEnvironment</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token operator\\\">&lt;-</span> <span class=\\\"token hvariable\\\">ask</span>\\n  <span class=\\\"token constant\\\">GameState</span> <span class=\\\"token hvariable\\\">target</span> <span class=\\\"token operator\\\">&lt;-</span> <span class=\\\"token hvariable\\\">get</span>\\n  <span class=\\\"token hvariable\\\">logic</span> <span class=\\\"token hvariable\\\">guess</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token hvariable\\\">target</span></code></pre>\\n      </div>\\n<p>Is…is that it? This will be a common reaction to porting this over. We had to provide a lot of infrastructure to do this in javascript, but purescript gives it to us for nothing!</p>\\n<p>So, what’s going on here? We’re <code class=\\\"language-text\\\">ask</code>ing the <code class=\\\"language-text\\\">Reader</code> part of <code class=\\\"language-text\\\">Game</code> to get the environment, unwrapping the newtype. We do similar for the <code class=\\\"language-text\\\">target</code>, in the <code class=\\\"language-text\\\">State</code> part of <code class=\\\"language-text\\\">Game</code>, using <code class=\\\"language-text\\\">get</code> to obtain it, and unwrapping it. We feed these and our guess into <code class=\\\"language-text\\\">logic</code>, and that’s where all the action is. Let’s check it out:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-haskell\\\"><code class=\\\"language-haskell\\\"><span class=\\\"token hvariable\\\">logic</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token hvariable\\\">low</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">high</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">tolerance</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Game</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">Maybe</span> <span class=\\\"token constant\\\">Int</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token hvariable\\\">logic</span> <span class=\\\"token hvariable\\\">g</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token hvariable\\\">low</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token hvariable\\\">l</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">high</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token hvariable\\\">h</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">tolerance</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token hvariable\\\">tol</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token hvariable\\\">t</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token hvariable\\\">g</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token hvariable\\\">l</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n    <span class=\\\"token hvariable\\\">tell</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">A.singleton</span> <span class=\\\"token string\\\">\\\"Too low for bounds.\\\"</span>\\n    <span class=\\\"token hvariable\\\">pure</span> <span class=\\\"token constant\\\">Nothing</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token hvariable\\\">g</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token hvariable\\\">h</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n    <span class=\\\"token hvariable\\\">tell</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">A.singleton</span> <span class=\\\"token string\\\">\\\"That's too high.\\\"</span>\\n    <span class=\\\"token hvariable\\\">pure</span> <span class=\\\"token constant\\\">Nothing</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token hvariable\\\">t</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token hvariable\\\">g</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n    <span class=\\\"token hvariable\\\">tell</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">A.singleton</span> <span class=\\\"token string\\\">\\\"That's it, Exactly!\\\"</span>\\n    <span class=\\\"token hvariable\\\">pure</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token constant\\\">Just</span> <span class=\\\"token hvariable\\\">t</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token hvariable\\\">g</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token hvariable\\\">t</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token hvariable\\\">tol</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n    <span class=\\\"token hvariable\\\">tell</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">A.singleton</span> <span class=\\\"token string\\\">\\\"That's too low\\\"</span>\\n    <span class=\\\"token hvariable\\\">pure</span> <span class=\\\"token constant\\\">Nothing</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token hvariable\\\">g</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token hvariable\\\">t</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token hvariable\\\">tol</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n    <span class=\\\"token hvariable\\\">tell</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">A.singleton</span> <span class=\\\"token string\\\">\\\"Too high, try again\\\"</span>\\n    <span class=\\\"token hvariable\\\">pure</span> <span class=\\\"token constant\\\">Nothing</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token builtin\\\">otherwise</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n    <span class=\\\"token hvariable\\\">tell</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">A.singleton</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token string\\\">\\\"Close Enough! The number was \\\"</span> <span class=\\\"token operator\\\">&lt;></span> <span class=\\\"token builtin\\\">show</span> <span class=\\\"token hvariable\\\">t</span>\\n    <span class=\\\"token hvariable\\\">pure</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token constant\\\">Just</span> <span class=\\\"token hvariable\\\">t</span></code></pre>\\n      </div>\\n<p>I know, right? Our three functions from before can be completely contained <em>within the guards of the function!</em> For each guard, we give the requisite message to the <code class=\\\"language-text\\\">Writer</code> part of <code class=\\\"language-text\\\">Game</code>’s monoid, and return a <code class=\\\"language-text\\\">Maybe Int</code>, containing either a <code class=\\\"language-text\\\">Nothing</code> in the case of a bad input or bad guess, or a <code class=\\\"language-text\\\">Just</code> containing the <code class=\\\"language-text\\\">target</code> in the case of a good guess.</p>\\n<p>Great, I guess it’s time we started to worry about getting input, and returning output to the console. Let’s start with something no purescript project is complete without: a <code class=\\\"language-text\\\">main</code> function.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-haskell\\\"><code class=\\\"language-haskell\\\"><span class=\\\"token hvariable\\\">main</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Effect</span> <span class=\\\"token constant\\\">Unit</span>\\n<span class=\\\"token hvariable\\\">main</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token hvariable\\\">void</span> <span class=\\\"token keyword\\\">do</span>\\n  <span class=\\\"token keyword\\\">let</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token hvariable\\\">gameEnvironment</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token number\\\">100</span> <span class=\\\"token number\\\">3</span>\\n  <span class=\\\"token hvariable\\\">rnd</span> <span class=\\\"token operator\\\">&lt;-</span> <span class=\\\"token hvariable\\\">randomInt</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token number\\\">100</span>\\n  <span class=\\\"token hvariable\\\">runGame</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token constant\\\">GameState</span> <span class=\\\"token hvariable\\\">rnd</span></code></pre>\\n      </div>\\n<p>We’ll need to add an import for this to make sense:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-haskell\\\"><code class=\\\"language-haskell\\\"><span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Effect</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">Effect</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>We use <code class=\\\"language-text\\\">void</code> because we don’t care about the result of the computation: we’re just replacing it with a <code class=\\\"language-text\\\">Unit</code> anyway. This is because we’re side-effecting here - well, not here exactly. We’ve put it off to another function, <code class=\\\"language-text\\\">runGame</code>. We feed it a <code class=\\\"language-text\\\">GameEnvironment</code> and a <code class=\\\"language-text\\\">GameState</code> that we create.</p>\\n<p>We’re in the home-stretch now…let’s check out <code class=\\\"language-text\\\">runGame</code>, but first…you got it, imports:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-haskell\\\"><code class=\\\"language-haskell\\\"><span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Control.Monad.RWS</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">evalRWS</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Data.Foldable</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">for_</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Data.Tuple</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">Tuple</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">..</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Effect.Console</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">log</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Effect.Random</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">randomInt</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Game</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">game</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Node.ReadLine <span class=\\\"token keyword\\\">as</span> RL</span>\\n\\n<span class=\\\"token hvariable\\\">runGame</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">GameEnvironment</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">GameState</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Effect</span> <span class=\\\"token constant\\\">Unit</span>\\n<span class=\\\"token hvariable\\\">runGame</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token hvariable\\\">state</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n  <span class=\\\"token hvariable\\\">interface</span> <span class=\\\"token operator\\\">&lt;-</span> <span class=\\\"token hvariable\\\">RL.createConsoleInterface</span> <span class=\\\"token hvariable\\\">RL.noCompletion</span>\\n  <span class=\\\"token hvariable\\\">RL.setPrompt</span> <span class=\\\"token string\\\">\\\"> \\\"</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token hvariable\\\">interface</span>\\n\\n  <span class=\\\"token keyword\\\">let</span>\\n    <span class=\\\"token hvariable\\\">lineHandler</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">String</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Effect</span> <span class=\\\"token constant\\\">Unit</span>\\n    <span class=\\\"token hvariable\\\">lineHandler</span> <span class=\\\"token hvariable\\\">input</span> <span class=\\\"token operator\\\">=</span>\\n      <span class=\\\"token keyword\\\">case</span> <span class=\\\"token hvariable\\\">parseInt</span> <span class=\\\"token hvariable\\\">input</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">toRadix</span> <span class=\\\"token number\\\">10</span> <span class=\\\"token keyword\\\">of</span>\\n        <span class=\\\"token constant\\\">Just</span> <span class=\\\"token hvariable\\\">guess</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">do</span>\\n          <span class=\\\"token keyword\\\">let</span> <span class=\\\"token constant\\\">Tuple</span> <span class=\\\"token hvariable\\\">result</span> <span class=\\\"token hvariable\\\">written</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token hvariable\\\">evalRWS</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">game</span> <span class=\\\"token hvariable\\\">guess</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token hvariable\\\">state</span>\\n          <span class=\\\"token hvariable\\\">for_</span> <span class=\\\"token hvariable\\\">written</span> <span class=\\\"token builtin\\\">log</span>\\n          <span class=\\\"token keyword\\\">case</span> <span class=\\\"token hvariable\\\">result</span> <span class=\\\"token keyword\\\">of</span>\\n            <span class=\\\"token constant\\\">Just</span> <span class=\\\"token hvariable\\\">_</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">do</span>\\n              <span class=\\\"token hvariable\\\">RL.close</span> <span class=\\\"token hvariable\\\">interface</span>\\n            <span class=\\\"token constant\\\">Nothing</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">do</span>\\n              <span class=\\\"token builtin\\\">log</span> <span class=\\\"token string\\\">\\\"Guess again:\\\"</span>\\n              <span class=\\\"token hvariable\\\">RL.close</span> <span class=\\\"token hvariable\\\">interface</span>\\n              <span class=\\\"token hvariable\\\">runGame</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token hvariable\\\">state</span>\\n        <span class=\\\"token constant\\\">Nothing</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">do</span>\\n          <span class=\\\"token builtin\\\">log</span> <span class=\\\"token string\\\">\\\"Try again, but with a whole number this time.\\\"</span>\\n          <span class=\\\"token hvariable\\\">RL.close</span> <span class=\\\"token hvariable\\\">interface</span>\\n          <span class=\\\"token hvariable\\\">runGame</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token hvariable\\\">state</span>\\n\\n  <span class=\\\"token hvariable\\\">RL.setLineHandler</span> <span class=\\\"token hvariable\\\">interface</span> <span class=\\\"token hvariable\\\">lineHandler</span>\\n  <span class=\\\"token builtin\\\">log</span> <span class=\\\"token string\\\">\\\"Guess a whole number between 1 and 100:\\\"</span>\\n  <span class=\\\"token hvariable\\\">RL.prompt</span> <span class=\\\"token hvariable\\\">interface</span>\\n\\n  <span class=\\\"token hvariable\\\">pure</span> <span class=\\\"token hvariable\\\">unit</span></code></pre>\\n      </div>\\n<p>This is the motherlode. The important import here is <code class=\\\"language-text\\\">Node.ReadLine</code>, a purescript wrapper around the <code class=\\\"language-text\\\">readline</code> module from node, which…might be familiar to you. The first thing we have to do is create for ourselves an interface, and set our prompt to ”> “. Then we define a handler for each line of input, set that handler as our LineHandler, log an instruction, and prompt the player for input.</p>\\n<p>Most of the input and output happens in this function. We first parse the input into an <code class=\\\"language-text\\\">Int</code>, which actually returns in a <code class=\\\"language-text\\\">Maybe</code>, allowing us to chastise the player for giving us bad input, if they do. That’s in the <code class=\\\"language-text\\\">Nothing</code> branch, where we chastise them, close the interface, and recall the <code class=\\\"language-text\\\">runGame</code> function with the same inputs.</p>\\n<p>If we did get a valid <code class=\\\"language-text\\\">Int</code>, we pass that <code class=\\\"language-text\\\">guess</code> into the <code class=\\\"language-text\\\">game</code> function, feeding that as the first paramter to <code class=\\\"language-text\\\">evalRWS</code>. We’re using <code class=\\\"language-text\\\">evalRWS</code> here instead of <code class=\\\"language-text\\\">runRWS</code> because I don’t care about getting the state returned. What I do care about (and you should, too) is the monoid with all our messages, and the <code class=\\\"language-text\\\">result</code>. First, we iterate through the log, printing each out to the Console. Then we match on the <code class=\\\"language-text\\\">result</code>: if we get a <code class=\\\"language-text\\\">Just</code>, we discard (for now) the integer and just close the interface. If we get a <code class=\\\"language-text\\\">Nothing</code>, we log a message to the player, close the interface, and call the <code class=\\\"language-text\\\">runGame</code> function again with the same inputs.</p>\\n<p>We’re in the homestretch: there’s one function we haven’t touched yet, but…it’s going to need some love. You see, we need to get input from the outside world, and that’s a dangerous, scary place full of untyped things. Luckily, we can leverage javascript to make things happen for us.</p>\\n<blockquote>\\n<p>Quick side note: I stole this from <code class=\\\"language-text\\\">purescript-parseint</code>. Integrating that library kept breaking my project, and I didn’t know why, so I figured I’d just copy it (and change it slightly). Thanks go out to <a href=\\\"https://github.com/athanclark\\\">Athan Clark</a> for the original!</p>\\n</blockquote>\\n<p>Let’s see the purescript first:</p>\\n<p><em>./src/Data/Int/Parse.purs</em></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-haskell\\\"><code class=\\\"language-haskell\\\"><span class=\\\"token keyword\\\">module</span> <span class=\\\"token constant\\\">Data.Int.Parse</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">parseInt</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">where</span>\\n\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Prelude</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Data.Maybe</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">Maybe</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">..</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Data.Int</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">round</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Data.Function.Uncurried</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">Fn2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">runFn2</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Global</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">isNaN</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token hvariable\\\">foreign</span> <span class=\\\"token hvariable\\\">import</span> <span class=\\\"token hvariable\\\">unsafeParseInt</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Fn2</span> <span class=\\\"token constant\\\">String</span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token constant\\\">Number</span>\\n\\n<span class=\\\"token comment\\\">-- | Warning - this function follows the same semantics as native JS's `parseInt()` function -</span>\\n<span class=\\\"token comment\\\">-- | it will parse \\\"as much as it can\\\", when it can - sometimes it succeeds when the input isn't</span>\\n<span class=\\\"token comment\\\">-- | completely sanitary.</span>\\n<span class=\\\"token hvariable\\\">parseInt</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">String</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Maybe</span> <span class=\\\"token constant\\\">Int</span>\\n<span class=\\\"token hvariable\\\">parseInt</span> <span class=\\\"token hvariable\\\">s</span> <span class=\\\"token hvariable\\\">i</span> <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token keyword\\\">let</span>\\n    <span class=\\\"token hvariable\\\">x</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token hvariable\\\">runFn2</span> <span class=\\\"token hvariable\\\">unsafeParseInt</span> <span class=\\\"token hvariable\\\">s</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">clamp</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token number\\\">36</span> <span class=\\\"token hvariable\\\">i</span>\\n  <span class=\\\"token keyword\\\">in</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token builtin\\\">isNaN</span> <span class=\\\"token hvariable\\\">x</span>\\n      <span class=\\\"token keyword\\\">then</span> <span class=\\\"token constant\\\">Nothing</span>\\n      <span class=\\\"token keyword\\\">else</span> <span class=\\\"token constant\\\">Just</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">round</span> <span class=\\\"token hvariable\\\">x</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>After our module declaration and imports, we define a <code class=\\\"language-text\\\">foreign import</code>. This is the function we are FFIing into in javascript. We’ll define this in a moment. Let’s take a lok at that Type:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-haskell\\\"><code class=\\\"language-haskell\\\"><span class=\\\"token hvariable\\\">foreign</span> <span class=\\\"token hvariable\\\">import</span> <span class=\\\"token hvariable\\\">unsafeParseInt</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Fn2</span> <span class=\\\"token constant\\\">String</span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token constant\\\">Number</span></code></pre>\\n      </div>\\n<p>This is a type that holds the input and output types for a two-input function. <code class=\\\"language-text\\\">unsafeParseInt</code> will take a <code class=\\\"language-text\\\">String</code>, defining the string we want to parse, and an <code class=\\\"language-text\\\">Int</code>, defining the radix, or base, that we’re parsing the string to. Now, the meat: <code class=\\\"language-text\\\">parseInt</code> takes the <code class=\\\"language-text\\\">String</code> we’re parsing, and an <code class=\\\"language-text\\\">Int</code> for the radix as well. We clamp the radix <code class=\\\"language-text\\\">i</code> to be between 2 and 36 (the range of acceptable radixes), and feed that and the string to <code class=\\\"language-text\\\">unsafeParseInt</code>, returning the <code class=\\\"language-text\\\">Fn2</code> that we execute by feeding it to <code class=\\\"language-text\\\">runFn2</code>. We check that the result was a number, returning the number in a <code class=\\\"language-text\\\">Just</code> if so, and a <code class=\\\"language-text\\\">Nothing</code> if not.</p>\\n<p>Seems simple enough, if a little circular. Let’s check our the javascript:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">exports<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">unsafeParseInt</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">unsafeParseInt</span><span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token punctuation\\\">,</span> base<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token punctuation\\\">,</span> base<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>So…we just call <code class=\\\"language-text\\\">parseInt</code>. That’s it. FFI is pretty awesome in purescript, compared to the backflips you need to do to achieve the same result in elm (which we may see sometime…). We add this import to <code class=\\\"language-text\\\">Main/purs</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-haskell\\\"><code class=\\\"language-haskell\\\"><span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Data.Int.Parse</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">parseInt</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>…And we’re done. Boom. It’s as simple as that.</p>\\n<p>Of course, after writing <code class=\\\"language-text\\\">parseInt</code>, I found <code class=\\\"language-text\\\">fromStringAs</code> paired with <code class=\\\"language-text\\\">decimal</code> from the <code class=\\\"language-text\\\">purescript-integers</code> package, as well as <code class=\\\"language-text\\\">read</code> from <code class=\\\"language-text\\\">purescript-read</code>. I’m going to use <code class=\\\"language-text\\\">fromStringAs</code> instead of my function. So, let’s see the whole shebang, so we can marvel at the beautiful, smaller codebase:</p>\\n<p><em>./src/Main.purs</em></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-haskell\\\"><code class=\\\"language-haskell\\\"><span class=\\\"token keyword\\\">module</span> <span class=\\\"token constant\\\">Main</span> <span class=\\\"token keyword\\\">where</span>\\n\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Prelude</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Control.Monad.RWS</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">RWS</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">evalRWS</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Control.Monad.Reader.Class</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">ask</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Control.Monad.State.Class</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">get</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Control.Monad.Writer.Class</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">tell</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Data.Array <span class=\\\"token keyword\\\">as</span> A</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Data.Foldable</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">for_</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Data.Int</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">fromStringAs</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">hexadecimal</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Data.Maybe</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">Maybe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">..</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Data.Tuple</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">Tuple</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">..</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Effect</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">Effect</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Effect.Console</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">log</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Effect.Random</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">randomInt</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Game</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">game</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Node.ReadLine <span class=\\\"token keyword\\\">as</span> RL</span>\\n\\n<span class=\\\"token keyword\\\">newtype</span> <span class=\\\"token constant\\\">GameEnvironment</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">GameEnvironment</span>\\n  <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token hvariable\\\">low</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">high</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">tolerance</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token hvariable\\\">gameEnvironment</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">GameEnvironment</span>\\n<span class=\\\"token hvariable\\\">gameEnvironment</span> <span class=\\\"token hvariable\\\">l</span> <span class=\\\"token hvariable\\\">h</span> <span class=\\\"token hvariable\\\">tol</span> <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token constant\\\">GameEnvironment</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token hvariable\\\">low</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token hvariable\\\">l</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">high</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token hvariable\\\">h</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">tolerance</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token hvariable\\\">tol</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">data</span> <span class=\\\"token constant\\\">GameState</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">GameState</span> <span class=\\\"token constant\\\">Int</span>\\n\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token constant\\\">Log</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">Array</span> <span class=\\\"token constant\\\">String</span>\\n\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token constant\\\">Game</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">RWS</span> <span class=\\\"token constant\\\">GameEnvironment</span> <span class=\\\"token constant\\\">Log</span> <span class=\\\"token constant\\\">GameState</span>\\n\\n<span class=\\\"token hvariable\\\">game</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Game</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">Maybe</span> <span class=\\\"token constant\\\">Int</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token hvariable\\\">game</span> <span class=\\\"token hvariable\\\">guess</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n  <span class=\\\"token constant\\\">GameEnvironment</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token operator\\\">&lt;-</span> <span class=\\\"token hvariable\\\">ask</span>\\n  <span class=\\\"token constant\\\">GameState</span> <span class=\\\"token hvariable\\\">target</span> <span class=\\\"token operator\\\">&lt;-</span> <span class=\\\"token hvariable\\\">get</span>\\n  <span class=\\\"token hvariable\\\">logic</span> <span class=\\\"token hvariable\\\">guess</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token hvariable\\\">target</span>\\n\\n<span class=\\\"token hvariable\\\">logic</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token hvariable\\\">low</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">high</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">tolerance</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Game</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">Maybe</span> <span class=\\\"token constant\\\">Int</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token hvariable\\\">logic</span> <span class=\\\"token hvariable\\\">g</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token hvariable\\\">low</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token hvariable\\\">l</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">high</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token hvariable\\\">h</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">tolerance</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token hvariable\\\">tol</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token hvariable\\\">t</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token hvariable\\\">g</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token hvariable\\\">l</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n    <span class=\\\"token hvariable\\\">tell</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">A.singleton</span> <span class=\\\"token string\\\">\\\"Too low for bounds.\\\"</span>\\n    <span class=\\\"token hvariable\\\">pure</span> <span class=\\\"token constant\\\">Nothing</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token hvariable\\\">g</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token hvariable\\\">h</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n    <span class=\\\"token hvariable\\\">tell</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">A.singleton</span> <span class=\\\"token string\\\">\\\"That's too high.\\\"</span>\\n    <span class=\\\"token hvariable\\\">pure</span> <span class=\\\"token constant\\\">Nothing</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token hvariable\\\">t</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token hvariable\\\">g</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n    <span class=\\\"token hvariable\\\">tell</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">A.singleton</span> <span class=\\\"token string\\\">\\\"That's it, Exactly!\\\"</span>\\n    <span class=\\\"token hvariable\\\">pure</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token constant\\\">Just</span> <span class=\\\"token hvariable\\\">t</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token hvariable\\\">g</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token hvariable\\\">t</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token hvariable\\\">tol</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n    <span class=\\\"token hvariable\\\">tell</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">A.singleton</span> <span class=\\\"token string\\\">\\\"That's too low\\\"</span>\\n    <span class=\\\"token hvariable\\\">pure</span> <span class=\\\"token constant\\\">Nothing</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token hvariable\\\">g</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token hvariable\\\">t</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token hvariable\\\">tol</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n    <span class=\\\"token hvariable\\\">tell</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">A.singleton</span> <span class=\\\"token string\\\">\\\"Too high, try again\\\"</span>\\n    <span class=\\\"token hvariable\\\">pure</span> <span class=\\\"token constant\\\">Nothing</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token builtin\\\">otherwise</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n    <span class=\\\"token hvariable\\\">tell</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">A.singleton</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token string\\\">\\\"Close Enough! The number was \\\"</span> <span class=\\\"token operator\\\">&lt;></span> <span class=\\\"token builtin\\\">show</span> <span class=\\\"token hvariable\\\">t</span>\\n    <span class=\\\"token hvariable\\\">pure</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token constant\\\">Just</span> <span class=\\\"token hvariable\\\">t</span>\\n\\n<span class=\\\"token hvariable\\\">runGame</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">GameEnvironment</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">GameState</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Effect</span> <span class=\\\"token constant\\\">Unit</span>\\n<span class=\\\"token hvariable\\\">runGame</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token hvariable\\\">state</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n  <span class=\\\"token hvariable\\\">interface</span> <span class=\\\"token operator\\\">&lt;-</span> <span class=\\\"token hvariable\\\">RL.createConsoleInterface</span> <span class=\\\"token hvariable\\\">RL.noCompletion</span>\\n  <span class=\\\"token hvariable\\\">RL.setPrompt</span> <span class=\\\"token string\\\">\\\"> \\\"</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token hvariable\\\">interface</span>\\n\\n  <span class=\\\"token keyword\\\">let</span>\\n    <span class=\\\"token hvariable\\\">lineHandler</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">String</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Effect</span> <span class=\\\"token constant\\\">Unit</span>\\n    <span class=\\\"token hvariable\\\">lineHandler</span> <span class=\\\"token hvariable\\\">input</span> <span class=\\\"token operator\\\">=</span>\\n      <span class=\\\"token keyword\\\">case</span> <span class=\\\"token hvariable\\\">fromStringAs</span> <span class=\\\"token hvariable\\\">decimal</span> <span class=\\\"token hvariable\\\">input</span> <span class=\\\"token keyword\\\">of</span>\\n        <span class=\\\"token constant\\\">Just</span> <span class=\\\"token hvariable\\\">guess</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">do</span>\\n          <span class=\\\"token keyword\\\">let</span> <span class=\\\"token constant\\\">Tuple</span> <span class=\\\"token hvariable\\\">result</span> <span class=\\\"token hvariable\\\">written</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token hvariable\\\">evalRWS</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">game</span> <span class=\\\"token hvariable\\\">guess</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token hvariable\\\">state</span>\\n          <span class=\\\"token hvariable\\\">for_</span> <span class=\\\"token hvariable\\\">written</span> <span class=\\\"token builtin\\\">log</span>\\n          <span class=\\\"token keyword\\\">case</span> <span class=\\\"token hvariable\\\">result</span> <span class=\\\"token keyword\\\">of</span>\\n            <span class=\\\"token constant\\\">Just</span> <span class=\\\"token hvariable\\\">_</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">do</span>\\n              <span class=\\\"token hvariable\\\">RL.close</span> <span class=\\\"token hvariable\\\">interface</span>\\n            <span class=\\\"token constant\\\">Nothing</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">do</span>\\n              <span class=\\\"token builtin\\\">log</span> <span class=\\\"token string\\\">\\\"Guess again:\\\"</span>\\n              <span class=\\\"token hvariable\\\">RL.close</span> <span class=\\\"token hvariable\\\">interface</span>\\n              <span class=\\\"token hvariable\\\">runGame</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token hvariable\\\">state</span>\\n        <span class=\\\"token constant\\\">Nothing</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">do</span>\\n          <span class=\\\"token builtin\\\">log</span> <span class=\\\"token string\\\">\\\"Try again, but with a whole number this time.\\\"</span>\\n          <span class=\\\"token hvariable\\\">RL.close</span> <span class=\\\"token hvariable\\\">interface</span>\\n          <span class=\\\"token hvariable\\\">runGame</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token hvariable\\\">state</span>\\n\\n  <span class=\\\"token hvariable\\\">RL.setLineHandler</span> <span class=\\\"token hvariable\\\">interface</span> <span class=\\\"token hvariable\\\">lineHandler</span>\\n  <span class=\\\"token builtin\\\">log</span> <span class=\\\"token string\\\">\\\"Guess a whole number between 1 and 100:\\\"</span>\\n  <span class=\\\"token hvariable\\\">RL.prompt</span> <span class=\\\"token hvariable\\\">interface</span>\\n\\n  <span class=\\\"token hvariable\\\">pure</span> <span class=\\\"token hvariable\\\">unit</span>\\n\\n<span class=\\\"token hvariable\\\">main</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Effect</span> <span class=\\\"token constant\\\">Unit</span>\\n<span class=\\\"token hvariable\\\">main</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token hvariable\\\">void</span> <span class=\\\"token keyword\\\">do</span>\\n  <span class=\\\"token keyword\\\">let</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token hvariable\\\">gameEnvironment</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token number\\\">100</span> <span class=\\\"token number\\\">3</span>\\n  <span class=\\\"token hvariable\\\">rnd</span> <span class=\\\"token operator\\\">&lt;-</span> <span class=\\\"token hvariable\\\">randomInt</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token number\\\">100</span>\\n  <span class=\\\"token hvariable\\\">runGame</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token constant\\\">GameState</span> <span class=\\\"token hvariable\\\">rnd</span></code></pre>\\n      </div>\\n<p>Style is subjective, of course, but i must say: I think this looks much nicer and cleaner than the javascript. That’s right, I’m claiming ML over Algol. Fight me!</p>\\n<p>And that’s a good place to stop, for now. Next time we’re going to stick with our new purescript codebase, and inplement a limit to the guesses. This is fun and all, but, with infinite guesses, players will always eventually win. That’s no fun! Let’s get this game to be more fun!</p>\\n<hr>\\n<hr>\\n<p><sup>* from the <a href=\\\"https://github.com/shatteredaesthetic/cipher-guess/tree/what-adt-04\\\">javascript version</a></sup></p>\",\"frontmatter\":{\"path\":\"/what-the-adt-p01\",\"title\":\"What the ADT Purescript 01 - Trying our Hand at a Real FP\",\"date\":\"October 06, 2018\"}}},\"pathContext\":{\"slug\":\"/what-the-adt-p01/\",\"previous\":{\"fields\":{\"slug\":\"/what-the-adt-04/\"},\"frontmatter\":{\"path\":\"/what-the-adt-04\",\"title\":\"What the ADT 04 - Things are Starting to Get Random\"}},\"next\":{\"fields\":{\"slug\":\"/what-the-adt-p02/\"},\"frontmatter\":{\"path\":\"/what-the-adt-p02\",\"title\":\"What the ADT Purescript 02 - Setting Limits\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---what-the-adt-p-01-6882842d5c56446a5cb2.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"(shatteredaesthetic)\",\"author\":\"Jason Polhemus\"}},\"markdownRemark\":{\"id\":\"/Users/travis/build/shatteredaesthetic/shatteredaesthetic.github.io/content/what-the-adt-p01.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>Purescript, Part 1: Up to speed</h2>\\n<p>Here we are, again. I know, I know: it’s been awhile - exactly what I didn’t what to have happen. The plan was posts to have much more frequently, but, you know - life.</p>\\n<p>Anyway, I thought we’d get back into the swing of things by getting completely out of our swing - and getting out of our programming language. We’ve been jumping through some hoops to make our style work in javascript; perhaps it’s time we tried our hand at a real programming language: something with a type system, with currying by default, with recursion. My choice is Purescript.</p>\\n<hr>\\n<p>Enough talk, let’s begin. All purescript projects begin with declaring our module and importing some libraries (most importantly, the <code class=\\\"language-text\\\">Prelude</code>). Because our file is called <code class=\\\"language-text\\\">Main.purs</code>, our module is also called <code class=\\\"language-text\\\">Main</code>. Let’s see it:</p>\\n<blockquote>\\n<p>Note: the purescript code samples are labeled as <em>haskell</em> so I can get come syntax highlighting. It makes it much easier to read the code, and they’re close enough to make it work.</p>\\n</blockquote>\\n<p><em>./src/Main.purs</em></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-haskell\\\"><code class=\\\"language-haskell\\\"><span class=\\\"token keyword\\\">module</span> <span class=\\\"token constant\\\">Main</span> <span class=\\\"token keyword\\\">where</span>\\n\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Prelude</span></code></pre>\\n      </div>\\n<p>Let’s start by defining some types. We’re thinking forward to future functionality, so we’re going to abandon our <code class=\\\"language-text\\\">ReaderT</code> for something a little more beefy: an <code class=\\\"language-text\\\">RWS</code> monad. This is basically a <code class=\\\"language-text\\\">Reader</code>, a <code class=\\\"language-text\\\">Writer</code>, and a <code class=\\\"language-text\\\">State</code> monad, all rolled up into one big ball of useful functionality.</p>\\n<p><em>./src/Main.purs</em></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-haskell\\\"><code class=\\\"language-haskell\\\"><span class=\\\"token keyword\\\">newtype</span> <span class=\\\"token constant\\\">GameEnvironment</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">GameEnvironment</span>\\n  <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token hvariable\\\">low</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">high</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">tolerance</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token hvariable\\\">gameEnvironment</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">GameEnvironment</span>\\n<span class=\\\"token hvariable\\\">gameEnvironment</span> <span class=\\\"token hvariable\\\">l</span> <span class=\\\"token hvariable\\\">h</span> <span class=\\\"token hvariable\\\">tol</span> <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token constant\\\">GameEnvironment</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token hvariable\\\">low</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token hvariable\\\">l</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">high</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token hvariable\\\">h</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">tolerance</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token hvariable\\\">tol</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">data</span> <span class=\\\"token constant\\\">GameState</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">GameState</span> <span class=\\\"token constant\\\">Int</span>\\n\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token constant\\\">Log</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">Array</span> <span class=\\\"token constant\\\">String</span>\\n\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token constant\\\">Game</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">RWS</span> <span class=\\\"token constant\\\">GameEnvironment</span> <span class=\\\"token constant\\\">Log</span> <span class=\\\"token constant\\\">GameState</span></code></pre>\\n      </div>\\n<p>We feed our <code class=\\\"language-text\\\">RWS</code> with and <code class=\\\"language-text\\\">env</code> for the <code class=\\\"language-text\\\">Reader</code>, a monoid for the <code class=\\\"language-text\\\">Writer</code>, and a type holding the state for the <code class=\\\"language-text\\\">State</code>. Our env is a newtype that holds a record containing the same three things that the <code class=\\\"language-text\\\">Config</code><sup>*</sup> held in the javascript version: our <code class=\\\"language-text\\\">high</code> and <code class=\\\"language-text\\\">low</code> bounds, and the tolerance for our answer. Then we define a constructor function for our <code class=\\\"language-text\\\">GameEnvironment</code> type.</p>\\n<p>GameState is a sum type with one constructor, and the monoid we’ll be using will be an <code class=\\\"language-text\\\">Array</code> of <code class=\\\"language-text\\\">Strings</code>. With these we define our <code class=\\\"language-text\\\">Game</code> type as an <code class=\\\"language-text\\\">RWS</code> monad with the aforementioned type populating it. So far, so good. Now what?</p>\\n<p>I guess we can start with a function that will play the game. Let’s call it <code class=\\\"language-text\\\">game</code>!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-haskell\\\"><code class=\\\"language-haskell\\\"><span class=\\\"token hvariable\\\">game</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Game</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">Maybe</span> <span class=\\\"token constant\\\">Int</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token hvariable\\\">game</span> <span class=\\\"token hvariable\\\">guess</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span></code></pre>\\n      </div>\\n<p>I’ll stop here so I can explain this a bit. Our function will take an Int which is the guess from the player. It will return a <code class=\\\"language-text\\\">Game (Maybe Int)</code>, our monad that’s been parameterized with a <code class=\\\"language-text\\\">Maybe Int</code>. I chose a <code class=\\\"language-text\\\">Maybe</code> so I could indicate when the guess was no good with a <code class=\\\"language-text\\\">Nothing</code>, (we don’t return the error messages like before<sup>*</sup>…you’ll see), and return the target with the winning guess. Who knows, maybe we’ll do something cool with it in the future.</p>\\n<p>The <code class=\\\"language-text\\\">do</code> is for Purescript’s do-notation. Since monads allow us to define sequential computations, as can use do-notation as a syntactic sugar around all the <code class=\\\"language-text\\\">bind</code>ing we’d otherwise do (same as our <code class=\\\"language-text\\\">chain</code> function in javascriptland). I’ll leave <a href=\\\"\\\">this</a> as a far better explanation than I have time to give here.</p>\\n<p>We need some more imports to make this work, so let’s get them:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-haskell\\\"><code class=\\\"language-haskell\\\"><span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Data.Array <span class=\\\"token keyword\\\">as</span> A</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Control.Monad.RWS</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">RWS</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Control.Monad.Reader.Class</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">ask</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Control.Monad.State.Class</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">get</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Control.Monad.Writer.Class</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">tell</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Data.Maybe</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">Maybe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">..</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>What have we got here? We need to grab <code class=\\\"language-text\\\">get</code> from <code class=\\\"language-text\\\">State</code>, <code class=\\\"language-text\\\">ask</code> from <code class=\\\"language-text\\\">Reader</code>, and <code class=\\\"language-text\\\">tell</code> from <code class=\\\"language-text\\\">Writer</code>, from their respective homes. We also get <code class=\\\"language-text\\\">Maybe</code> from it’s home, making sure to add the <code class=\\\"language-text\\\">(..)</code> so we have access to the constructors. We qualify our <code class=\\\"language-text\\\">Array</code> import, placing them under the namespace of <code class=\\\"language-text\\\">A</code>.</p>\\n<p>Okay, let’s continue:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-haskell\\\"><code class=\\\"language-haskell\\\"><span class=\\\"token hvariable\\\">game</span> <span class=\\\"token hvariable\\\">guess</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n  <span class=\\\"token constant\\\">GameEnvironment</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token operator\\\">&lt;-</span> <span class=\\\"token hvariable\\\">ask</span>\\n  <span class=\\\"token constant\\\">GameState</span> <span class=\\\"token hvariable\\\">target</span> <span class=\\\"token operator\\\">&lt;-</span> <span class=\\\"token hvariable\\\">get</span>\\n  <span class=\\\"token hvariable\\\">logic</span> <span class=\\\"token hvariable\\\">guess</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token hvariable\\\">target</span></code></pre>\\n      </div>\\n<p>Is…is that it? This will be a common reaction to porting this over. We had to provide a lot of infrastructure to do this in javascript, but purescript gives it to us for nothing!</p>\\n<p>So, what’s going on here? We’re <code class=\\\"language-text\\\">ask</code>ing the <code class=\\\"language-text\\\">Reader</code> part of <code class=\\\"language-text\\\">Game</code> to get the environment, unwrapping the newtype. We do similar for the <code class=\\\"language-text\\\">target</code>, in the <code class=\\\"language-text\\\">State</code> part of <code class=\\\"language-text\\\">Game</code>, using <code class=\\\"language-text\\\">get</code> to obtain it, and unwrapping it. We feed these and our guess into <code class=\\\"language-text\\\">logic</code>, and that’s where all the action is. Let’s check it out:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-haskell\\\"><code class=\\\"language-haskell\\\"><span class=\\\"token hvariable\\\">logic</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token hvariable\\\">low</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">high</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">tolerance</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Game</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">Maybe</span> <span class=\\\"token constant\\\">Int</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token hvariable\\\">logic</span> <span class=\\\"token hvariable\\\">g</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token hvariable\\\">low</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token hvariable\\\">l</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">high</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token hvariable\\\">h</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">tolerance</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token hvariable\\\">tol</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token hvariable\\\">t</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token hvariable\\\">g</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token hvariable\\\">l</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n    <span class=\\\"token hvariable\\\">tell</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">A.singleton</span> <span class=\\\"token string\\\">\\\"Too low for bounds.\\\"</span>\\n    <span class=\\\"token hvariable\\\">pure</span> <span class=\\\"token constant\\\">Nothing</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token hvariable\\\">g</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token hvariable\\\">h</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n    <span class=\\\"token hvariable\\\">tell</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">A.singleton</span> <span class=\\\"token string\\\">\\\"That's too high.\\\"</span>\\n    <span class=\\\"token hvariable\\\">pure</span> <span class=\\\"token constant\\\">Nothing</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token hvariable\\\">t</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token hvariable\\\">g</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n    <span class=\\\"token hvariable\\\">tell</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">A.singleton</span> <span class=\\\"token string\\\">\\\"That's it, Exactly!\\\"</span>\\n    <span class=\\\"token hvariable\\\">pure</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token constant\\\">Just</span> <span class=\\\"token hvariable\\\">t</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token hvariable\\\">g</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token hvariable\\\">t</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token hvariable\\\">tol</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n    <span class=\\\"token hvariable\\\">tell</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">A.singleton</span> <span class=\\\"token string\\\">\\\"That's too low\\\"</span>\\n    <span class=\\\"token hvariable\\\">pure</span> <span class=\\\"token constant\\\">Nothing</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token hvariable\\\">g</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token hvariable\\\">t</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token hvariable\\\">tol</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n    <span class=\\\"token hvariable\\\">tell</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">A.singleton</span> <span class=\\\"token string\\\">\\\"Too high, try again\\\"</span>\\n    <span class=\\\"token hvariable\\\">pure</span> <span class=\\\"token constant\\\">Nothing</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token builtin\\\">otherwise</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n    <span class=\\\"token hvariable\\\">tell</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">A.singleton</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token string\\\">\\\"Close Enough! The number was \\\"</span> <span class=\\\"token operator\\\">&lt;></span> <span class=\\\"token builtin\\\">show</span> <span class=\\\"token hvariable\\\">t</span>\\n    <span class=\\\"token hvariable\\\">pure</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token constant\\\">Just</span> <span class=\\\"token hvariable\\\">t</span></code></pre>\\n      </div>\\n<p>I know, right? Our three functions from before can be completely contained <em>within the guards of the function!</em> For each guard, we give the requisite message to the <code class=\\\"language-text\\\">Writer</code> part of <code class=\\\"language-text\\\">Game</code>’s monoid, and return a <code class=\\\"language-text\\\">Maybe Int</code>, containing either a <code class=\\\"language-text\\\">Nothing</code> in the case of a bad input or bad guess, or a <code class=\\\"language-text\\\">Just</code> containing the <code class=\\\"language-text\\\">target</code> in the case of a good guess.</p>\\n<p>Great, I guess it’s time we started to worry about getting input, and returning output to the console. Let’s start with something no purescript project is complete without: a <code class=\\\"language-text\\\">main</code> function.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-haskell\\\"><code class=\\\"language-haskell\\\"><span class=\\\"token hvariable\\\">main</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Effect</span> <span class=\\\"token constant\\\">Unit</span>\\n<span class=\\\"token hvariable\\\">main</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token hvariable\\\">void</span> <span class=\\\"token keyword\\\">do</span>\\n  <span class=\\\"token keyword\\\">let</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token hvariable\\\">gameEnvironment</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token number\\\">100</span> <span class=\\\"token number\\\">3</span>\\n  <span class=\\\"token hvariable\\\">rnd</span> <span class=\\\"token operator\\\">&lt;-</span> <span class=\\\"token hvariable\\\">randomInt</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token number\\\">100</span>\\n  <span class=\\\"token hvariable\\\">runGame</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token constant\\\">GameState</span> <span class=\\\"token hvariable\\\">rnd</span></code></pre>\\n      </div>\\n<p>We’ll need to add an import for this to make sense:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-haskell\\\"><code class=\\\"language-haskell\\\"><span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Effect</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">Effect</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>We use <code class=\\\"language-text\\\">void</code> because we don’t care about the result of the computation: we’re just replacing it with a <code class=\\\"language-text\\\">Unit</code> anyway. This is because we’re side-effecting here - well, not here exactly. We’ve put it off to another function, <code class=\\\"language-text\\\">runGame</code>. We feed it a <code class=\\\"language-text\\\">GameEnvironment</code> and a <code class=\\\"language-text\\\">GameState</code> that we create.</p>\\n<p>We’re in the home-stretch now…let’s check out <code class=\\\"language-text\\\">runGame</code>, but first…you got it, imports:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-haskell\\\"><code class=\\\"language-haskell\\\"><span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Control.Monad.RWS</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">evalRWS</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Data.Foldable</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">for_</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Data.Tuple</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">Tuple</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">..</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Effect.Console</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">log</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Effect.Random</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">randomInt</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Game</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">game</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Node.ReadLine <span class=\\\"token keyword\\\">as</span> RL</span>\\n\\n<span class=\\\"token hvariable\\\">runGame</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">GameEnvironment</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">GameState</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Effect</span> <span class=\\\"token constant\\\">Unit</span>\\n<span class=\\\"token hvariable\\\">runGame</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token hvariable\\\">state</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n  <span class=\\\"token hvariable\\\">interface</span> <span class=\\\"token operator\\\">&lt;-</span> <span class=\\\"token hvariable\\\">RL.createConsoleInterface</span> <span class=\\\"token hvariable\\\">RL.noCompletion</span>\\n  <span class=\\\"token hvariable\\\">RL.setPrompt</span> <span class=\\\"token string\\\">\\\"> \\\"</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token hvariable\\\">interface</span>\\n\\n  <span class=\\\"token keyword\\\">let</span>\\n    <span class=\\\"token hvariable\\\">lineHandler</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">String</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Effect</span> <span class=\\\"token constant\\\">Unit</span>\\n    <span class=\\\"token hvariable\\\">lineHandler</span> <span class=\\\"token hvariable\\\">input</span> <span class=\\\"token operator\\\">=</span>\\n      <span class=\\\"token keyword\\\">case</span> <span class=\\\"token hvariable\\\">parseInt</span> <span class=\\\"token hvariable\\\">input</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">toRadix</span> <span class=\\\"token number\\\">10</span> <span class=\\\"token keyword\\\">of</span>\\n        <span class=\\\"token constant\\\">Just</span> <span class=\\\"token hvariable\\\">guess</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">do</span>\\n          <span class=\\\"token keyword\\\">let</span> <span class=\\\"token constant\\\">Tuple</span> <span class=\\\"token hvariable\\\">result</span> <span class=\\\"token hvariable\\\">written</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token hvariable\\\">evalRWS</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">game</span> <span class=\\\"token hvariable\\\">guess</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token hvariable\\\">state</span>\\n          <span class=\\\"token hvariable\\\">for_</span> <span class=\\\"token hvariable\\\">written</span> <span class=\\\"token builtin\\\">log</span>\\n          <span class=\\\"token keyword\\\">case</span> <span class=\\\"token hvariable\\\">result</span> <span class=\\\"token keyword\\\">of</span>\\n            <span class=\\\"token constant\\\">Just</span> <span class=\\\"token hvariable\\\">_</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">do</span>\\n              <span class=\\\"token hvariable\\\">RL.close</span> <span class=\\\"token hvariable\\\">interface</span>\\n            <span class=\\\"token constant\\\">Nothing</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">do</span>\\n              <span class=\\\"token builtin\\\">log</span> <span class=\\\"token string\\\">\\\"Guess again:\\\"</span>\\n              <span class=\\\"token hvariable\\\">RL.close</span> <span class=\\\"token hvariable\\\">interface</span>\\n              <span class=\\\"token hvariable\\\">runGame</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token hvariable\\\">state</span>\\n        <span class=\\\"token constant\\\">Nothing</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">do</span>\\n          <span class=\\\"token builtin\\\">log</span> <span class=\\\"token string\\\">\\\"Try again, but with a whole number this time.\\\"</span>\\n          <span class=\\\"token hvariable\\\">RL.close</span> <span class=\\\"token hvariable\\\">interface</span>\\n          <span class=\\\"token hvariable\\\">runGame</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token hvariable\\\">state</span>\\n\\n  <span class=\\\"token hvariable\\\">RL.setLineHandler</span> <span class=\\\"token hvariable\\\">interface</span> <span class=\\\"token hvariable\\\">lineHandler</span>\\n  <span class=\\\"token builtin\\\">log</span> <span class=\\\"token string\\\">\\\"Guess a whole number between 1 and 100:\\\"</span>\\n  <span class=\\\"token hvariable\\\">RL.prompt</span> <span class=\\\"token hvariable\\\">interface</span>\\n\\n  <span class=\\\"token hvariable\\\">pure</span> <span class=\\\"token hvariable\\\">unit</span></code></pre>\\n      </div>\\n<p>This is the motherlode. The important import here is <code class=\\\"language-text\\\">Node.ReadLine</code>, a purescript wrapper around the <code class=\\\"language-text\\\">readline</code> module from node, which…might be familiar to you. The first thing we have to do is create for ourselves an interface, and set our prompt to ”> “. Then we define a handler for each line of input, set that handler as our LineHandler, log an instruction, and prompt the player for input.</p>\\n<p>Most of the input and output happens in this function. We first parse the input into an <code class=\\\"language-text\\\">Int</code>, which actually returns in a <code class=\\\"language-text\\\">Maybe</code>, allowing us to chastise the player for giving us bad input, if they do. That’s in the <code class=\\\"language-text\\\">Nothing</code> branch, where we chastise them, close the interface, and recall the <code class=\\\"language-text\\\">runGame</code> function with the same inputs.</p>\\n<p>If we did get a valid <code class=\\\"language-text\\\">Int</code>, we pass that <code class=\\\"language-text\\\">guess</code> into the <code class=\\\"language-text\\\">game</code> function, feeding that as the first paramter to <code class=\\\"language-text\\\">evalRWS</code>. We’re using <code class=\\\"language-text\\\">evalRWS</code> here instead of <code class=\\\"language-text\\\">runRWS</code> because I don’t care about getting the state returned. What I do care about (and you should, too) is the monoid with all our messages, and the <code class=\\\"language-text\\\">result</code>. First, we iterate through the log, printing each out to the Console. Then we match on the <code class=\\\"language-text\\\">result</code>: if we get a <code class=\\\"language-text\\\">Just</code>, we discard (for now) the integer and just close the interface. If we get a <code class=\\\"language-text\\\">Nothing</code>, we log a message to the player, close the interface, and call the <code class=\\\"language-text\\\">runGame</code> function again with the same inputs.</p>\\n<p>We’re in the homestretch: there’s one function we haven’t touched yet, but…it’s going to need some love. You see, we need to get input from the outside world, and that’s a dangerous, scary place full of untyped things. Luckily, we can leverage javascript to make things happen for us.</p>\\n<blockquote>\\n<p>Quick side note: I stole this from <code class=\\\"language-text\\\">purescript-parseint</code>. Integrating that library kept breaking my project, and I didn’t know why, so I figured I’d just copy it (and change it slightly). Thanks go out to <a href=\\\"https://github.com/athanclark\\\">Athan Clark</a> for the original!</p>\\n</blockquote>\\n<p>Let’s see the purescript first:</p>\\n<p><em>./src/Data/Int/Parse.purs</em></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-haskell\\\"><code class=\\\"language-haskell\\\"><span class=\\\"token keyword\\\">module</span> <span class=\\\"token constant\\\">Data.Int.Parse</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">parseInt</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">where</span>\\n\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Prelude</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Data.Maybe</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">Maybe</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">..</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Data.Int</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">round</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Data.Function.Uncurried</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">Fn2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">runFn2</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Global</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">isNaN</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token hvariable\\\">foreign</span> <span class=\\\"token hvariable\\\">import</span> <span class=\\\"token hvariable\\\">unsafeParseInt</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Fn2</span> <span class=\\\"token constant\\\">String</span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token constant\\\">Number</span>\\n\\n<span class=\\\"token comment\\\">-- | Warning - this function follows the same semantics as native JS's `parseInt()` function -</span>\\n<span class=\\\"token comment\\\">-- | it will parse \\\"as much as it can\\\", when it can - sometimes it succeeds when the input isn't</span>\\n<span class=\\\"token comment\\\">-- | completely sanitary.</span>\\n<span class=\\\"token hvariable\\\">parseInt</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">String</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Maybe</span> <span class=\\\"token constant\\\">Int</span>\\n<span class=\\\"token hvariable\\\">parseInt</span> <span class=\\\"token hvariable\\\">s</span> <span class=\\\"token hvariable\\\">i</span> <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token keyword\\\">let</span>\\n    <span class=\\\"token hvariable\\\">x</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token hvariable\\\">runFn2</span> <span class=\\\"token hvariable\\\">unsafeParseInt</span> <span class=\\\"token hvariable\\\">s</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">clamp</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token number\\\">36</span> <span class=\\\"token hvariable\\\">i</span>\\n  <span class=\\\"token keyword\\\">in</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token builtin\\\">isNaN</span> <span class=\\\"token hvariable\\\">x</span>\\n      <span class=\\\"token keyword\\\">then</span> <span class=\\\"token constant\\\">Nothing</span>\\n      <span class=\\\"token keyword\\\">else</span> <span class=\\\"token constant\\\">Just</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">round</span> <span class=\\\"token hvariable\\\">x</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>After our module declaration and imports, we define a <code class=\\\"language-text\\\">foreign import</code>. This is the function we are FFIing into in javascript. We’ll define this in a moment. Let’s take a lok at that Type:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-haskell\\\"><code class=\\\"language-haskell\\\"><span class=\\\"token hvariable\\\">foreign</span> <span class=\\\"token hvariable\\\">import</span> <span class=\\\"token hvariable\\\">unsafeParseInt</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Fn2</span> <span class=\\\"token constant\\\">String</span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token constant\\\">Number</span></code></pre>\\n      </div>\\n<p>This is a type that holds the input and output types for a two-input function. <code class=\\\"language-text\\\">unsafeParseInt</code> will take a <code class=\\\"language-text\\\">String</code>, defining the string we want to parse, and an <code class=\\\"language-text\\\">Int</code>, defining the radix, or base, that we’re parsing the string to. Now, the meat: <code class=\\\"language-text\\\">parseInt</code> takes the <code class=\\\"language-text\\\">String</code> we’re parsing, and an <code class=\\\"language-text\\\">Int</code> for the radix as well. We clamp the radix <code class=\\\"language-text\\\">i</code> to be between 2 and 36 (the range of acceptable radixes), and feed that and the string to <code class=\\\"language-text\\\">unsafeParseInt</code>, returning the <code class=\\\"language-text\\\">Fn2</code> that we execute by feeding it to <code class=\\\"language-text\\\">runFn2</code>. We check that the result was a number, returning the number in a <code class=\\\"language-text\\\">Just</code> if so, and a <code class=\\\"language-text\\\">Nothing</code> if not.</p>\\n<p>Seems simple enough, if a little circular. Let’s check our the javascript:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">exports<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">unsafeParseInt</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">unsafeParseInt</span><span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token punctuation\\\">,</span> base<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token punctuation\\\">,</span> base<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>So…we just call <code class=\\\"language-text\\\">parseInt</code>. That’s it. FFI is pretty awesome in purescript, compared to the backflips you need to do to achieve the same result in elm (which we may see sometime…). We add this import to <code class=\\\"language-text\\\">Main/purs</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-haskell\\\"><code class=\\\"language-haskell\\\"><span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Data.Int.Parse</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">parseInt</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>…And we’re done. Boom. It’s as simple as that.</p>\\n<p>Of course, after writing <code class=\\\"language-text\\\">parseInt</code>, I found <code class=\\\"language-text\\\">fromStringAs</code> paired with <code class=\\\"language-text\\\">decimal</code> from the <code class=\\\"language-text\\\">purescript-integers</code> package, as well as <code class=\\\"language-text\\\">read</code> from <code class=\\\"language-text\\\">purescript-read</code>. I’m going to use <code class=\\\"language-text\\\">fromStringAs</code> instead of my function. So, let’s see the whole shebang, so we can marvel at the beautiful, smaller codebase:</p>\\n<p><em>./src/Main.purs</em></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-haskell\\\"><code class=\\\"language-haskell\\\"><span class=\\\"token keyword\\\">module</span> <span class=\\\"token constant\\\">Main</span> <span class=\\\"token keyword\\\">where</span>\\n\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Prelude</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Control.Monad.RWS</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">RWS</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">evalRWS</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Control.Monad.Reader.Class</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">ask</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Control.Monad.State.Class</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">get</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Control.Monad.Writer.Class</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">tell</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Data.Array <span class=\\\"token keyword\\\">as</span> A</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Data.Foldable</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">for_</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Data.Int</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">fromStringAs</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">hexadecimal</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Data.Maybe</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">Maybe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">..</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Data.Tuple</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">Tuple</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">..</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Effect</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">Effect</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Effect.Console</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">log</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Effect.Random</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">randomInt</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Game</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">game</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token import_statement\\\"><span class=\\\"token keyword\\\">import</span> Node.ReadLine <span class=\\\"token keyword\\\">as</span> RL</span>\\n\\n<span class=\\\"token keyword\\\">newtype</span> <span class=\\\"token constant\\\">GameEnvironment</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">GameEnvironment</span>\\n  <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token hvariable\\\">low</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">high</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">tolerance</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token hvariable\\\">gameEnvironment</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">GameEnvironment</span>\\n<span class=\\\"token hvariable\\\">gameEnvironment</span> <span class=\\\"token hvariable\\\">l</span> <span class=\\\"token hvariable\\\">h</span> <span class=\\\"token hvariable\\\">tol</span> <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token constant\\\">GameEnvironment</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token hvariable\\\">low</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token hvariable\\\">l</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">high</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token hvariable\\\">h</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">tolerance</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token hvariable\\\">tol</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">data</span> <span class=\\\"token constant\\\">GameState</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">GameState</span> <span class=\\\"token constant\\\">Int</span>\\n\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token constant\\\">Log</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">Array</span> <span class=\\\"token constant\\\">String</span>\\n\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token constant\\\">Game</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">RWS</span> <span class=\\\"token constant\\\">GameEnvironment</span> <span class=\\\"token constant\\\">Log</span> <span class=\\\"token constant\\\">GameState</span>\\n\\n<span class=\\\"token hvariable\\\">game</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Game</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">Maybe</span> <span class=\\\"token constant\\\">Int</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token hvariable\\\">game</span> <span class=\\\"token hvariable\\\">guess</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n  <span class=\\\"token constant\\\">GameEnvironment</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token operator\\\">&lt;-</span> <span class=\\\"token hvariable\\\">ask</span>\\n  <span class=\\\"token constant\\\">GameState</span> <span class=\\\"token hvariable\\\">target</span> <span class=\\\"token operator\\\">&lt;-</span> <span class=\\\"token hvariable\\\">get</span>\\n  <span class=\\\"token hvariable\\\">logic</span> <span class=\\\"token hvariable\\\">guess</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token hvariable\\\">target</span>\\n\\n<span class=\\\"token hvariable\\\">logic</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token hvariable\\\">low</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">high</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">tolerance</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Int</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Game</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">Maybe</span> <span class=\\\"token constant\\\">Int</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token hvariable\\\">logic</span> <span class=\\\"token hvariable\\\">g</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token hvariable\\\">low</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token hvariable\\\">l</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">high</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token hvariable\\\">h</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token hvariable\\\">tolerance</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token hvariable\\\">tol</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token hvariable\\\">t</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token hvariable\\\">g</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token hvariable\\\">l</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n    <span class=\\\"token hvariable\\\">tell</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">A.singleton</span> <span class=\\\"token string\\\">\\\"Too low for bounds.\\\"</span>\\n    <span class=\\\"token hvariable\\\">pure</span> <span class=\\\"token constant\\\">Nothing</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token hvariable\\\">g</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token hvariable\\\">h</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n    <span class=\\\"token hvariable\\\">tell</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">A.singleton</span> <span class=\\\"token string\\\">\\\"That's too high.\\\"</span>\\n    <span class=\\\"token hvariable\\\">pure</span> <span class=\\\"token constant\\\">Nothing</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token hvariable\\\">t</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token hvariable\\\">g</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n    <span class=\\\"token hvariable\\\">tell</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">A.singleton</span> <span class=\\\"token string\\\">\\\"That's it, Exactly!\\\"</span>\\n    <span class=\\\"token hvariable\\\">pure</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token constant\\\">Just</span> <span class=\\\"token hvariable\\\">t</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token hvariable\\\">g</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token hvariable\\\">t</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token hvariable\\\">tol</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n    <span class=\\\"token hvariable\\\">tell</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">A.singleton</span> <span class=\\\"token string\\\">\\\"That's too low\\\"</span>\\n    <span class=\\\"token hvariable\\\">pure</span> <span class=\\\"token constant\\\">Nothing</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token hvariable\\\">g</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token hvariable\\\">t</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token hvariable\\\">tol</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n    <span class=\\\"token hvariable\\\">tell</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">A.singleton</span> <span class=\\\"token string\\\">\\\"Too high, try again\\\"</span>\\n    <span class=\\\"token hvariable\\\">pure</span> <span class=\\\"token constant\\\">Nothing</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token builtin\\\">otherwise</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n    <span class=\\\"token hvariable\\\">tell</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token hvariable\\\">A.singleton</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token string\\\">\\\"Close Enough! The number was \\\"</span> <span class=\\\"token operator\\\">&lt;></span> <span class=\\\"token builtin\\\">show</span> <span class=\\\"token hvariable\\\">t</span>\\n    <span class=\\\"token hvariable\\\">pure</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token constant\\\">Just</span> <span class=\\\"token hvariable\\\">t</span>\\n\\n<span class=\\\"token hvariable\\\">runGame</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">GameEnvironment</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">GameState</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Effect</span> <span class=\\\"token constant\\\">Unit</span>\\n<span class=\\\"token hvariable\\\">runGame</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token hvariable\\\">state</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">do</span>\\n  <span class=\\\"token hvariable\\\">interface</span> <span class=\\\"token operator\\\">&lt;-</span> <span class=\\\"token hvariable\\\">RL.createConsoleInterface</span> <span class=\\\"token hvariable\\\">RL.noCompletion</span>\\n  <span class=\\\"token hvariable\\\">RL.setPrompt</span> <span class=\\\"token string\\\">\\\"> \\\"</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token hvariable\\\">interface</span>\\n\\n  <span class=\\\"token keyword\\\">let</span>\\n    <span class=\\\"token hvariable\\\">lineHandler</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">String</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token constant\\\">Effect</span> <span class=\\\"token constant\\\">Unit</span>\\n    <span class=\\\"token hvariable\\\">lineHandler</span> <span class=\\\"token hvariable\\\">input</span> <span class=\\\"token operator\\\">=</span>\\n      <span class=\\\"token keyword\\\">case</span> <span class=\\\"token hvariable\\\">fromStringAs</span> <span class=\\\"token hvariable\\\">decimal</span> <span class=\\\"token hvariable\\\">input</span> <span class=\\\"token keyword\\\">of</span>\\n        <span class=\\\"token constant\\\">Just</span> <span class=\\\"token hvariable\\\">guess</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">do</span>\\n          <span class=\\\"token keyword\\\">let</span> <span class=\\\"token constant\\\">Tuple</span> <span class=\\\"token hvariable\\\">result</span> <span class=\\\"token hvariable\\\">written</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token hvariable\\\">evalRWS</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token hvariable\\\">game</span> <span class=\\\"token hvariable\\\">guess</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token hvariable\\\">state</span>\\n          <span class=\\\"token hvariable\\\">for_</span> <span class=\\\"token hvariable\\\">written</span> <span class=\\\"token builtin\\\">log</span>\\n          <span class=\\\"token keyword\\\">case</span> <span class=\\\"token hvariable\\\">result</span> <span class=\\\"token keyword\\\">of</span>\\n            <span class=\\\"token constant\\\">Just</span> <span class=\\\"token hvariable\\\">_</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">do</span>\\n              <span class=\\\"token hvariable\\\">RL.close</span> <span class=\\\"token hvariable\\\">interface</span>\\n            <span class=\\\"token constant\\\">Nothing</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">do</span>\\n              <span class=\\\"token builtin\\\">log</span> <span class=\\\"token string\\\">\\\"Guess again:\\\"</span>\\n              <span class=\\\"token hvariable\\\">RL.close</span> <span class=\\\"token hvariable\\\">interface</span>\\n              <span class=\\\"token hvariable\\\">runGame</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token hvariable\\\">state</span>\\n        <span class=\\\"token constant\\\">Nothing</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">do</span>\\n          <span class=\\\"token builtin\\\">log</span> <span class=\\\"token string\\\">\\\"Try again, but with a whole number this time.\\\"</span>\\n          <span class=\\\"token hvariable\\\">RL.close</span> <span class=\\\"token hvariable\\\">interface</span>\\n          <span class=\\\"token hvariable\\\">runGame</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token hvariable\\\">state</span>\\n\\n  <span class=\\\"token hvariable\\\">RL.setLineHandler</span> <span class=\\\"token hvariable\\\">interface</span> <span class=\\\"token hvariable\\\">lineHandler</span>\\n  <span class=\\\"token builtin\\\">log</span> <span class=\\\"token string\\\">\\\"Guess a whole number between 1 and 100:\\\"</span>\\n  <span class=\\\"token hvariable\\\">RL.prompt</span> <span class=\\\"token hvariable\\\">interface</span>\\n\\n  <span class=\\\"token hvariable\\\">pure</span> <span class=\\\"token hvariable\\\">unit</span>\\n\\n<span class=\\\"token hvariable\\\">main</span> <span class=\\\"token operator\\\">::</span> <span class=\\\"token constant\\\">Effect</span> <span class=\\\"token constant\\\">Unit</span>\\n<span class=\\\"token hvariable\\\">main</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token hvariable\\\">void</span> <span class=\\\"token keyword\\\">do</span>\\n  <span class=\\\"token keyword\\\">let</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token hvariable\\\">gameEnvironment</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token number\\\">100</span> <span class=\\\"token number\\\">3</span>\\n  <span class=\\\"token hvariable\\\">rnd</span> <span class=\\\"token operator\\\">&lt;-</span> <span class=\\\"token hvariable\\\">randomInt</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token number\\\">100</span>\\n  <span class=\\\"token hvariable\\\">runGame</span> <span class=\\\"token hvariable\\\">env</span> <span class=\\\"token operator\\\">$</span> <span class=\\\"token constant\\\">GameState</span> <span class=\\\"token hvariable\\\">rnd</span></code></pre>\\n      </div>\\n<p>Style is subjective, of course, but i must say: I think this looks much nicer and cleaner than the javascript. That’s right, I’m claiming ML over Algol. Fight me!</p>\\n<p>And that’s a good place to stop, for now. Next time we’re going to stick with our new purescript codebase, and inplement a limit to the guesses. This is fun and all, but, with infinite guesses, players will always eventually win. That’s no fun! Let’s get this game to be more fun!</p>\\n<hr>\\n<hr>\\n<p><sup>* from the <a href=\\\"https://github.com/shatteredaesthetic/cipher-guess/tree/what-adt-04\\\">javascript version</a></sup></p>\",\"frontmatter\":{\"path\":\"/what-the-adt-p01\",\"title\":\"What the ADT Purescript 01 - Trying our Hand at a Real FP\",\"date\":\"October 06, 2018\"}}},\"pathContext\":{\"slug\":\"/what-the-adt-p01/\",\"previous\":{\"fields\":{\"slug\":\"/what-the-adt-04/\"},\"frontmatter\":{\"path\":\"/what-the-adt-04\",\"title\":\"What the ADT 04 - Things are Starting to Get Random\"}},\"next\":{\"fields\":{\"slug\":\"/what-the-adt-p02/\"},\"frontmatter\":{\"path\":\"/what-the-adt-p02\",\"title\":\"What the ADT Purescript 02 - Setting Limits\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/what-the-adt-p-01.json\n// module id = 660\n// module chunks = 148761740396195"],"sourceRoot":""}