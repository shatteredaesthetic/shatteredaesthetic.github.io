{"version":3,"sources":["webpack:///path---what-the-adt-03-c154a3e99739efd61502.js","webpack:///./.cache/json/what-the-adt-03.json"],"names":["webpackJsonp","569","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","path","date","pathContext","slug","previous","fields","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,uBAAAC,OAAA,mBAA0DC,gBAAmBC,GAAA,oIAAAC,KAAA,+isBAA8ptBC,aAA8ZC,KAAA,mBAAAN,MAAA,gDAAAO,KAAA,mBAA2GC,aAAgBC,KAAA,oBAAAC,UAAuCC,QAAUF,KAAA,qBAA2BJ,aAAgBC,KAAA,mBAAAN,MAAA,4CAA6EY,KAAA","file":"path---what-the-adt-03-c154a3e99739efd61502.js","sourcesContent":["webpackJsonp([174671463525015],{\n\n/***/ 569:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"(shatteredaesthetic)\",\"author\":\"Jason Polhemus\"}},\"markdownRemark\":{\"id\":\"/Users/travis/build/shatteredaesthetic/shatteredaesthetic.github.io/content/what-the-adt-03.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>Part 3 - Gotta Love a Second Chance</h2>\\n<p>We’re back, and we have a number-guessing game that lets you guess once. That’s…not much fun. So, what we’ll do today is extend the game to allow more than one guess; however, if the guess is correct - or within the tolerance - the player wins and the game exits.</p>\\n<p>Now that our game is getting more involved, it’s time to look at the results of our logic. So far, we’ve just returned strings. That isn’t very extendable, so let’s use something else. What do we get? It’s either a failure or succeeds being within tolerance.</p>\\n<p>Given this, let’s make two new union types to cover our <code class=\\\"language-text\\\">Failure</code> and <code class=\\\"language-text\\\">Success</code> cases:</p>\\n<p>new <strong>utils.js</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// type Failure = InValid | TooHigh | TooLow</span>\\n<span class=\\\"token keyword\\\">const</span> Failure <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">taggedSum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Failure'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  InValid<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'x'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  TooHigh<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'x'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  TooLow<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'x'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// type Success = InTolerance | Equal</span>\\n<span class=\\\"token keyword\\\">const</span> Success <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">taggedSum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Success'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  InTolerance<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'x'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  Equal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'x'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// renderFailure : Failure -> String</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">renderFailure</span> <span class=\\\"token operator\\\">=</span> fail <span class=\\\"token operator\\\">=></span>\\n  fail<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cata</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    InValid<span class=\\\"token punctuation\\\">:</span> x <span class=\\\"token operator\\\">=></span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>x<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> is not an integer between 1 and 100. Try again.`</span></span><span class=\\\"token punctuation\\\">,</span>\\n    TooHigh<span class=\\\"token punctuation\\\">:</span> x <span class=\\\"token operator\\\">=></span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>x<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> was too high. Try again.`</span></span><span class=\\\"token punctuation\\\">,</span>\\n    TooLow<span class=\\\"token punctuation\\\">:</span> x <span class=\\\"token operator\\\">=></span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>x<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> was too low. Try again.`</span></span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// renderSuccess : Success -> String</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">renderSuccess</span> <span class=\\\"token operator\\\">=</span> success <span class=\\\"token operator\\\">=></span>\\n  success<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cata</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    InTolerance<span class=\\\"token punctuation\\\">:</span> x <span class=\\\"token operator\\\">=></span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>x<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> is close enough. Good Job!`</span></span><span class=\\\"token punctuation\\\">,</span>\\n    Equal<span class=\\\"token punctuation\\\">:</span> x <span class=\\\"token operator\\\">=></span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>x<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> is it, exactly! Winner!`</span></span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>As you can see, I also added a couple of helper function for getting our final result string. Each result also now takes the number guessed, so we can use it in our string. Cool, now we just have to adjust the functions in our logic to use these new types:</p>\\n<p>new <strong>logic.js</strong> changes</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// isTolerant : (Int, Int) -> Int -> Eq</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">isTolerant</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>low<span class=\\\"token punctuation\\\">,</span> high<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token function\\\">ifElse</span><span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">=></span> n <span class=\\\"token operator\\\">&lt;</span> low<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">K</span><span class=\\\"token punctuation\\\">(</span>Ord<span class=\\\"token punctuation\\\">.</span>LT<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">ifElse</span><span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">=></span> n <span class=\\\"token operator\\\">></span> high<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">K</span><span class=\\\"token punctuation\\\">(</span>Ord<span class=\\\"token punctuation\\\">.</span>GT<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">K</span><span class=\\\"token punctuation\\\">(</span>Ord<span class=\\\"token punctuation\\\">.</span>EQ<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// firstTest : Int -> ReaderT Env (Either Failure Int)</span>\\n<span class=\\\"token keyword\\\">const</span> firstTest <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">liftFn</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">ifElse</span><span class=\\\"token punctuation\\\">(</span>\\n    n <span class=\\\"token operator\\\">=></span> <span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">isNaN</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">&lt;=</span> n <span class=\\\"token operator\\\">&amp;&amp;</span> n <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">,</span>\\n    Right<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>Failure<span class=\\\"token punctuation\\\">.</span>InValid<span class=\\\"token punctuation\\\">,</span> Left<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// secondTest : Int -> ReaderT Env (Either Failure Int)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">secondTest</span> <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token function\\\">ask</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> tolerance<span class=\\\"token punctuation\\\">,</span> target <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n      <span class=\\\"token function\\\">branch</span><span class=\\\"token punctuation\\\">(</span>target<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bimap</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">-</span> tolerance<span class=\\\"token punctuation\\\">,</span> x <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> tolerance<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">merge</span><span class=\\\"token punctuation\\\">(</span>isTolerant<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ap</span><span class=\\\"token punctuation\\\">(</span>M<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">chain</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token function\\\">liftFn</span><span class=\\\"token punctuation\\\">(</span>o <span class=\\\"token operator\\\">=></span>\\n        o<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cata</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n          LT<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">K</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">Left</span><span class=\\\"token punctuation\\\">(</span>Failure<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">TooLow</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n          EQ<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">K</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">Right</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n          GT<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">K</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">Left</span><span class=\\\"token punctuation\\\">(</span>Failure<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">TooHigh</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// thirdTest : Int -> ReaderT Env (Either Failure Success)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">thirdTest</span> <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token function\\\">ask</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> target <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n      <span class=\\\"token function\\\">ifElse</span><span class=\\\"token punctuation\\\">(</span>\\n        n <span class=\\\"token operator\\\">=></span> target <span class=\\\"token operator\\\">===</span> n<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>Success<span class=\\\"token punctuation\\\">.</span>Equal<span class=\\\"token punctuation\\\">,</span> Right<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>Success<span class=\\\"token punctuation\\\">.</span>InTolerance<span class=\\\"token punctuation\\\">,</span> Right<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ap</span><span class=\\\"token punctuation\\\">(</span>M<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">chain</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">liftFn</span><span class=\\\"token punctuation\\\">(</span>I<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>The first change is, appropriately, in <code class=\\\"language-text\\\">firstTest</code>. Previously, the ‘else’ branch was <code class=\\\"language-text\\\">fail(&#39;You need to learn to follow instructions&#39;)</code>, <code class=\\\"language-text\\\">fail</code> being <code class=\\\"language-text\\\">pipe(Left, K)</code>: The string get put into the <code class=\\\"language-text\\\">Left</code>, and is passed to the <code class=\\\"language-text\\\">K</code>. Now, we’re not going to ignore the element, but put it into our new type’s constructor, <code class=\\\"language-text\\\">Failure.InValid</code>, then put it in a <code class=\\\"language-text\\\">Left</code>. Easy!</p>\\n<p><code class=\\\"language-text\\\">secondTest</code> is an easy change, too. We replace both calls to <code class=\\\"language-text\\\">fail</code> with the guess placed in the appropriate constructor of <code class=\\\"language-text\\\">Failure</code>, passed into a <code class=\\\"language-text\\\">Left</code>, then passed into <code class=\\\"language-text\\\">K</code>. Boom!</p>\\n<p>I bet you can guess what we’re changing in <code class=\\\"language-text\\\">thirdTest</code>. That’s right: we’re replacing the calls to <code class=\\\"language-text\\\">pass</code>. Each one will take the guess, pass it into the appropriate constructor of <code class=\\\"language-text\\\">Success</code>, then put it in a <code class=\\\"language-text\\\">Right</code>. It’s just that easy!</p>\\n<p>Of course, now we get a <code class=\\\"language-text\\\">Success</code> or a <code class=\\\"language-text\\\">Failure</code> at the end, and we need to convert that…and we have those functions! Let’s change up our <code class=\\\"language-text\\\">index.js</code>:</p>\\n<p>new <strong>index.js</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// output : Either String String -> IO ()</span>\\n<span class=\\\"token keyword\\\">const</span> output <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">either</span><span class=\\\"token punctuation\\\">(</span>\\n  fail <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">printLine</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">renderFailure</span><span class=\\\"token punctuation\\\">(</span>fail<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  success <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">printLine</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">renderSuccess</span><span class=\\\"token punctuation\\\">(</span>success<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>The only change we need is in <code class=\\\"language-text\\\">output</code>. We pass our result into it’s specific render function, then pass that to <code class=\\\"language-text\\\">printLine</code>. Now we’re back to where we were.</p>\\n<h3>Great, but I’d like more guesses</h3>\\n<p>And you shall have it. This one is super complex, and here it is:</p>\\n<p>new <strong>index.js</strong> (with repeats)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// main : Env -> IO ()</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">main</span> <span class=\\\"token operator\\\">=</span> env <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token function\\\">getGuess</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`Guess a number between 1 and 100`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">logic</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">chain</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token function\\\">either</span><span class=\\\"token punctuation\\\">(</span>\\n        fail <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">printLine</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">renderFailure</span><span class=\\\"token punctuation\\\">(</span>fail<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">chain</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        success <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">printLine</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">renderSuccess</span><span class=\\\"token punctuation\\\">(</span>success<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">chain</span><span class=\\\"token punctuation\\\">(</span>exit<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Wait, that’s it? Indeed it is. We inlined our <code class=\\\"language-text\\\">output</code> function, so we can get the <code class=\\\"language-text\\\">env</code> argument needed to recurse. If the guess is bad, the message is printed, and we start anew. If the guess is good, we print the message and exit. By the way, here’s the code for <code class=\\\"language-text\\\">exit</code> in <code class=\\\"language-text\\\">cli.js</code>.</p>\\n<p>new <strong>cli.js</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// exit : () -> IO ()</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">exit</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token function\\\">IO</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    process<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">exit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<h3>Well, that was a let-down</h3>\\n<p>Yeah, but isn’t it cool how we were able to endlessly multiply our game with such little code? Recursion for the win! Take it for a spin!</p>\\n<p>Of course, the number is always 23, so…replay value is kind-of nil. So next time we’ll add a little randomness. See you next time!</p>\",\"frontmatter\":{\"path\":\"/what-the-adt-03\",\"title\":\"What the ADT 03 - More Than Just a Single-Use\",\"date\":\"June 01, 2018\"}}},\"pathContext\":{\"slug\":\"/what-the-adt-03/\",\"previous\":{\"fields\":{\"slug\":\"/what-the-adt-02/\"},\"frontmatter\":{\"path\":\"/what-the-adt-02\",\"title\":\"What the ADT 02 - A UI Worth Commanding\"}},\"next\":null}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---what-the-adt-03-c154a3e99739efd61502.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"(shatteredaesthetic)\",\"author\":\"Jason Polhemus\"}},\"markdownRemark\":{\"id\":\"/Users/travis/build/shatteredaesthetic/shatteredaesthetic.github.io/content/what-the-adt-03.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>Part 3 - Gotta Love a Second Chance</h2>\\n<p>We’re back, and we have a number-guessing game that lets you guess once. That’s…not much fun. So, what we’ll do today is extend the game to allow more than one guess; however, if the guess is correct - or within the tolerance - the player wins and the game exits.</p>\\n<p>Now that our game is getting more involved, it’s time to look at the results of our logic. So far, we’ve just returned strings. That isn’t very extendable, so let’s use something else. What do we get? It’s either a failure or succeeds being within tolerance.</p>\\n<p>Given this, let’s make two new union types to cover our <code class=\\\"language-text\\\">Failure</code> and <code class=\\\"language-text\\\">Success</code> cases:</p>\\n<p>new <strong>utils.js</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// type Failure = InValid | TooHigh | TooLow</span>\\n<span class=\\\"token keyword\\\">const</span> Failure <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">taggedSum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Failure'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  InValid<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'x'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  TooHigh<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'x'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  TooLow<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'x'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// type Success = InTolerance | Equal</span>\\n<span class=\\\"token keyword\\\">const</span> Success <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">taggedSum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Success'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  InTolerance<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'x'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  Equal<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'x'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// renderFailure : Failure -> String</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">renderFailure</span> <span class=\\\"token operator\\\">=</span> fail <span class=\\\"token operator\\\">=></span>\\n  fail<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cata</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    InValid<span class=\\\"token punctuation\\\">:</span> x <span class=\\\"token operator\\\">=></span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>x<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> is not an integer between 1 and 100. Try again.`</span></span><span class=\\\"token punctuation\\\">,</span>\\n    TooHigh<span class=\\\"token punctuation\\\">:</span> x <span class=\\\"token operator\\\">=></span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>x<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> was too high. Try again.`</span></span><span class=\\\"token punctuation\\\">,</span>\\n    TooLow<span class=\\\"token punctuation\\\">:</span> x <span class=\\\"token operator\\\">=></span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>x<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> was too low. Try again.`</span></span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// renderSuccess : Success -> String</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">renderSuccess</span> <span class=\\\"token operator\\\">=</span> success <span class=\\\"token operator\\\">=></span>\\n  success<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cata</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    InTolerance<span class=\\\"token punctuation\\\">:</span> x <span class=\\\"token operator\\\">=></span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>x<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> is close enough. Good Job!`</span></span><span class=\\\"token punctuation\\\">,</span>\\n    Equal<span class=\\\"token punctuation\\\">:</span> x <span class=\\\"token operator\\\">=></span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>x<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> is it, exactly! Winner!`</span></span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>As you can see, I also added a couple of helper function for getting our final result string. Each result also now takes the number guessed, so we can use it in our string. Cool, now we just have to adjust the functions in our logic to use these new types:</p>\\n<p>new <strong>logic.js</strong> changes</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// isTolerant : (Int, Int) -> Int -> Eq</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">isTolerant</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>low<span class=\\\"token punctuation\\\">,</span> high<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token function\\\">ifElse</span><span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">=></span> n <span class=\\\"token operator\\\">&lt;</span> low<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">K</span><span class=\\\"token punctuation\\\">(</span>Ord<span class=\\\"token punctuation\\\">.</span>LT<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">ifElse</span><span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">=></span> n <span class=\\\"token operator\\\">></span> high<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">K</span><span class=\\\"token punctuation\\\">(</span>Ord<span class=\\\"token punctuation\\\">.</span>GT<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">K</span><span class=\\\"token punctuation\\\">(</span>Ord<span class=\\\"token punctuation\\\">.</span>EQ<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// firstTest : Int -> ReaderT Env (Either Failure Int)</span>\\n<span class=\\\"token keyword\\\">const</span> firstTest <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">liftFn</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">ifElse</span><span class=\\\"token punctuation\\\">(</span>\\n    n <span class=\\\"token operator\\\">=></span> <span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">isNaN</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">&lt;=</span> n <span class=\\\"token operator\\\">&amp;&amp;</span> n <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">,</span>\\n    Right<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>Failure<span class=\\\"token punctuation\\\">.</span>InValid<span class=\\\"token punctuation\\\">,</span> Left<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// secondTest : Int -> ReaderT Env (Either Failure Int)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">secondTest</span> <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token function\\\">ask</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> tolerance<span class=\\\"token punctuation\\\">,</span> target <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n      <span class=\\\"token function\\\">branch</span><span class=\\\"token punctuation\\\">(</span>target<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bimap</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">-</span> tolerance<span class=\\\"token punctuation\\\">,</span> x <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> tolerance<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">merge</span><span class=\\\"token punctuation\\\">(</span>isTolerant<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ap</span><span class=\\\"token punctuation\\\">(</span>M<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">chain</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token function\\\">liftFn</span><span class=\\\"token punctuation\\\">(</span>o <span class=\\\"token operator\\\">=></span>\\n        o<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cata</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n          LT<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">K</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">Left</span><span class=\\\"token punctuation\\\">(</span>Failure<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">TooLow</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n          EQ<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">K</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">Right</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n          GT<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">K</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">Left</span><span class=\\\"token punctuation\\\">(</span>Failure<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">TooHigh</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// thirdTest : Int -> ReaderT Env (Either Failure Success)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">thirdTest</span> <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token function\\\">ask</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> target <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n      <span class=\\\"token function\\\">ifElse</span><span class=\\\"token punctuation\\\">(</span>\\n        n <span class=\\\"token operator\\\">=></span> target <span class=\\\"token operator\\\">===</span> n<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>Success<span class=\\\"token punctuation\\\">.</span>Equal<span class=\\\"token punctuation\\\">,</span> Right<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>Success<span class=\\\"token punctuation\\\">.</span>InTolerance<span class=\\\"token punctuation\\\">,</span> Right<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ap</span><span class=\\\"token punctuation\\\">(</span>M<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">chain</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">liftFn</span><span class=\\\"token punctuation\\\">(</span>I<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>The first change is, appropriately, in <code class=\\\"language-text\\\">firstTest</code>. Previously, the ‘else’ branch was <code class=\\\"language-text\\\">fail(&#39;You need to learn to follow instructions&#39;)</code>, <code class=\\\"language-text\\\">fail</code> being <code class=\\\"language-text\\\">pipe(Left, K)</code>: The string get put into the <code class=\\\"language-text\\\">Left</code>, and is passed to the <code class=\\\"language-text\\\">K</code>. Now, we’re not going to ignore the element, but put it into our new type’s constructor, <code class=\\\"language-text\\\">Failure.InValid</code>, then put it in a <code class=\\\"language-text\\\">Left</code>. Easy!</p>\\n<p><code class=\\\"language-text\\\">secondTest</code> is an easy change, too. We replace both calls to <code class=\\\"language-text\\\">fail</code> with the guess placed in the appropriate constructor of <code class=\\\"language-text\\\">Failure</code>, passed into a <code class=\\\"language-text\\\">Left</code>, then passed into <code class=\\\"language-text\\\">K</code>. Boom!</p>\\n<p>I bet you can guess what we’re changing in <code class=\\\"language-text\\\">thirdTest</code>. That’s right: we’re replacing the calls to <code class=\\\"language-text\\\">pass</code>. Each one will take the guess, pass it into the appropriate constructor of <code class=\\\"language-text\\\">Success</code>, then put it in a <code class=\\\"language-text\\\">Right</code>. It’s just that easy!</p>\\n<p>Of course, now we get a <code class=\\\"language-text\\\">Success</code> or a <code class=\\\"language-text\\\">Failure</code> at the end, and we need to convert that…and we have those functions! Let’s change up our <code class=\\\"language-text\\\">index.js</code>:</p>\\n<p>new <strong>index.js</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// output : Either String String -> IO ()</span>\\n<span class=\\\"token keyword\\\">const</span> output <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">either</span><span class=\\\"token punctuation\\\">(</span>\\n  fail <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">printLine</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">renderFailure</span><span class=\\\"token punctuation\\\">(</span>fail<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  success <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">printLine</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">renderSuccess</span><span class=\\\"token punctuation\\\">(</span>success<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>The only change we need is in <code class=\\\"language-text\\\">output</code>. We pass our result into it’s specific render function, then pass that to <code class=\\\"language-text\\\">printLine</code>. Now we’re back to where we were.</p>\\n<h3>Great, but I’d like more guesses</h3>\\n<p>And you shall have it. This one is super complex, and here it is:</p>\\n<p>new <strong>index.js</strong> (with repeats)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// main : Env -> IO ()</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">main</span> <span class=\\\"token operator\\\">=</span> env <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token function\\\">getGuess</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`Guess a number between 1 and 100`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">logic</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">chain</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token function\\\">either</span><span class=\\\"token punctuation\\\">(</span>\\n        fail <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">printLine</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">renderFailure</span><span class=\\\"token punctuation\\\">(</span>fail<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">chain</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        success <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">printLine</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">renderSuccess</span><span class=\\\"token punctuation\\\">(</span>success<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">chain</span><span class=\\\"token punctuation\\\">(</span>exit<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Wait, that’s it? Indeed it is. We inlined our <code class=\\\"language-text\\\">output</code> function, so we can get the <code class=\\\"language-text\\\">env</code> argument needed to recurse. If the guess is bad, the message is printed, and we start anew. If the guess is good, we print the message and exit. By the way, here’s the code for <code class=\\\"language-text\\\">exit</code> in <code class=\\\"language-text\\\">cli.js</code>.</p>\\n<p>new <strong>cli.js</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// exit : () -> IO ()</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">exit</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token function\\\">IO</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    process<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">exit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<h3>Well, that was a let-down</h3>\\n<p>Yeah, but isn’t it cool how we were able to endlessly multiply our game with such little code? Recursion for the win! Take it for a spin!</p>\\n<p>Of course, the number is always 23, so…replay value is kind-of nil. So next time we’ll add a little randomness. See you next time!</p>\",\"frontmatter\":{\"path\":\"/what-the-adt-03\",\"title\":\"What the ADT 03 - More Than Just a Single-Use\",\"date\":\"June 01, 2018\"}}},\"pathContext\":{\"slug\":\"/what-the-adt-03/\",\"previous\":{\"fields\":{\"slug\":\"/what-the-adt-02/\"},\"frontmatter\":{\"path\":\"/what-the-adt-02\",\"title\":\"What the ADT 02 - A UI Worth Commanding\"}},\"next\":null}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/what-the-adt-03.json\n// module id = 569\n// module chunks = 174671463525015"],"sourceRoot":""}